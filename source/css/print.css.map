{"version":3,"file":"print.css","sources":["print.scss","partials/common/_imports.scss","../../node_modules/bourbon/app/assets/stylesheets/_bourbon.scss","../../node_modules/bourbon/app/assets/stylesheets/settings/_prefixer.scss","../../node_modules/bourbon/app/assets/stylesheets/settings/_px-to-em.scss","../../node_modules/bourbon/app/assets/stylesheets/settings/_asset-pipeline.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_assign-inputs.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_contains.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_contains-falsy.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_is-length.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_is-light.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_is-number.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_is-size.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_px-to-em.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_px-to-rem.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_shade.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_strip-units.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_tint.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_transition-property-name.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_unpack.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_modular-scale.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_convert-units.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_directional-values.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_font-source-declaration.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_gradient-positions-parser.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_linear-angle-parser.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_linear-gradient-parser.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_linear-positions-parser.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_linear-side-corner-parser.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_radial-arg-parser.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_radial-positions-parser.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_radial-gradient-parser.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_render-gradients.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_shape-size-stripper.scss","../../node_modules/bourbon/app/assets/stylesheets/helpers/_str-to-num.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_animation.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_appearance.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_backface-visibility.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_background.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_background-image.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_border-image.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_calc.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_columns.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_filter.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_flex-box.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_font-face.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_font-feature-settings.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_hidpi-media-query.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_hyphens.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_image-rendering.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_keyframes.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_linear-gradient.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_perspective.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_placeholder.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_radial-gradient.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_selection.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_text-decoration.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_transform.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_transition.scss","../../node_modules/bourbon/app/assets/stylesheets/css3/_user-select.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_border-color.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_border-radius.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_border-style.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_border-width.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_buttons.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_clearfix.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_ellipsis.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_font-stacks.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_hide-text.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_margin.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_padding.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_position.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_prefixer.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_retina-image.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_size.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_text-inputs.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_timing-functions.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_triangle.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_word-wrap.scss","../../node_modules/bourbon/app/assets/stylesheets/_bourbon-deprecated-upcoming.scss","partials/bootstrap/_variables.scss","partials/bootstrap/mixins/_grid.scss","partials/bootstrap/mixins/_grid-framework.scss","partials/bootstrap/_grid.scss","partials/bootstrap/mixins/_responsive-visibility.scss","partials/bootstrap/_responsive-utilities.scss","../../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_settings.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_context.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_helpers.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_parsers.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_query.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_single.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/single/_default.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_double.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/double/_default-pair.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/double/_double-string.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/double/_default.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_triple.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/triple/_default.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_resolution.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/resolution/_resolution.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_no-query.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_respond-to.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_legacy-settings.scss","partials/common/_variables.scss","partials/common/_placeholders.scss","partials/base/_icons.scss","partials/common/mixins/_custom.scss","partials/common/mixins/_gradients.scss"],"sourcesContent":["/**\n * @file\n * sass/print.scss\n */\n\n@import \"partials/common/imports\";\n","/**\n * @file\n * sass/partials/common/_imports.scss\n *\n * Importing this file should not generate any CSS.\n */\n\n@import \"bourbon\";\n@import \"partials/bootstrap/variables\";\n@import \"partials/bootstrap/mixins/grid\";\n@import \"partials/bootstrap/mixins/grid-framework\";\n@import \"partials/bootstrap/grid\";\n@import \"partials/bootstrap/mixins/responsive-visibility\";\n@import \"partials/bootstrap/responsive-utilities\";\n@import \"breakpoint\";\n@import \"partials/common/variables\";\n@import \"partials/common/placeholders\";\n@import \"partials/base/icons\";\n@import \"partials/common/mixins/custom\";\n@import \"partials/common/mixins/gradients\";\n","// Bourbon 4.2.7\n// http://bourbon.io\n// Copyright 2011-2015 thoughtbot, inc.\n// MIT License\n\n@import \"settings/prefixer\";\n@import \"settings/px-to-em\";\n@import \"settings/asset-pipeline\";\n\n@import \"functions/assign-inputs\";\n@import \"functions/contains\";\n@import \"functions/contains-falsy\";\n@import \"functions/is-length\";\n@import \"functions/is-light\";\n@import \"functions/is-number\";\n@import \"functions/is-size\";\n@import \"functions/px-to-em\";\n@import \"functions/px-to-rem\";\n@import \"functions/shade\";\n@import \"functions/strip-units\";\n@import \"functions/tint\";\n@import \"functions/transition-property-name\";\n@import \"functions/unpack\";\n@import \"functions/modular-scale\";\n\n@import \"helpers/convert-units\";\n@import \"helpers/directional-values\";\n@import \"helpers/font-source-declaration\";\n@import \"helpers/gradient-positions-parser\";\n@import \"helpers/linear-angle-parser\";\n@import \"helpers/linear-gradient-parser\";\n@import \"helpers/linear-positions-parser\";\n@import \"helpers/linear-side-corner-parser\";\n@import \"helpers/radial-arg-parser\";\n@import \"helpers/radial-positions-parser\";\n@import \"helpers/radial-gradient-parser\";\n@import \"helpers/render-gradients\";\n@import \"helpers/shape-size-stripper\";\n@import \"helpers/str-to-num\";\n\n@import \"css3/animation\";\n@import \"css3/appearance\";\n@import \"css3/backface-visibility\";\n@import \"css3/background\";\n@import \"css3/background-image\";\n@import \"css3/border-image\";\n@import \"css3/calc\";\n@import \"css3/columns\";\n@import \"css3/filter\";\n@import \"css3/flex-box\";\n@import \"css3/font-face\";\n@import \"css3/font-feature-settings\";\n@import \"css3/hidpi-media-query\";\n@import \"css3/hyphens\";\n@import \"css3/image-rendering\";\n@import \"css3/keyframes\";\n@import \"css3/linear-gradient\";\n@import \"css3/perspective\";\n@import \"css3/placeholder\";\n@import \"css3/radial-gradient\";\n@import \"css3/selection\";\n@import \"css3/text-decoration\";\n@import \"css3/transform\";\n@import \"css3/transition\";\n@import \"css3/user-select\";\n\n@import \"addons/border-color\";\n@import \"addons/border-radius\";\n@import \"addons/border-style\";\n@import \"addons/border-width\";\n@import \"addons/buttons\";\n@import \"addons/clearfix\";\n@import \"addons/ellipsis\";\n@import \"addons/font-stacks\";\n@import \"addons/hide-text\";\n@import \"addons/margin\";\n@import \"addons/padding\";\n@import \"addons/position\";\n@import \"addons/prefixer\";\n@import \"addons/retina-image\";\n@import \"addons/size\";\n@import \"addons/text-inputs\";\n@import \"addons/timing-functions\";\n@import \"addons/triangle\";\n@import \"addons/word-wrap\";\n\n@import \"bourbon-deprecated-upcoming\";\n","@charset \"UTF-8\";\n\n/// Global variables to enable or disable vendor prefixes\n\n$prefix-for-webkit:    true !default;\n$prefix-for-mozilla:   true !default;\n$prefix-for-microsoft: true !default;\n$prefix-for-opera:     true !default;\n$prefix-for-spec:      true !default;\n","$em-base: 16px !default;\n","@charset \"UTF-8\";\n\n/// A global setting to enable or disable the `$asset-pipeline` variable for all functions that accept it.\n///\n/// @type Bool\n\n$asset-pipeline: false !default;\n","@function assign-inputs($inputs, $pseudo: null) {\n  $list: ();\n\n  @each $input in $inputs {\n    $input: unquote($input);\n    $input: if($pseudo, $input + \":\" + $pseudo, $input);\n    $list: append($list, $input, comma);\n  }\n\n  @return $list;\n}\n","@charset \"UTF-8\";\n\n/// Checks if a list contains a value(s).\n///\n/// @access private\n///\n/// @param {List} $list\n///   The list to check against.\n///\n/// @param {List} $values\n///   A single value or list of values to check for.\n///\n/// @example scss - Usage\n///   contains($list, $value)\n///\n/// @return {Bool}\n\n@function contains($list, $values...) {\n  @each $value in $values {\n    @if type-of(index($list, $value)) != \"number\" {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n","@charset \"UTF-8\";\n\n/// Checks if a list does not contains a value.\n///\n/// @access private\n///\n/// @param {List} $list\n///   The list to check against.\n///\n/// @return {Bool}\n\n@function contains-falsy($list) {\n  @each $item in $list {\n    @if not $item {\n      @return true;\n    }\n  }\n\n  @return false;\n}\n","@charset \"UTF-8\";\n\n/// Checks for a valid CSS length.\n///\n/// @param {String} $value\n\n@function is-length($value) {\n  @return type-of($value) != \"null\" and (str-slice($value + \"\", 1, 4) == \"calc\"\n       or index(auto inherit initial 0, $value)\n       or (type-of($value) == \"number\" and not(unitless($value))));\n}\n","@charset \"UTF-8\";\n\n/// Programatically determines whether a color is light or dark.\n///\n/// @link http://robots.thoughtbot.com/closer-look-color-lightness\n///\n/// @param {Color (Hex)} $color\n///\n/// @example scss - Usage\n///   is-light($color)\n///\n/// @return {Bool}\n\n@function is-light($hex-color) {\n  $-local-red: red(rgba($hex-color, 1));\n  $-local-green: green(rgba($hex-color, 1));\n  $-local-blue: blue(rgba($hex-color, 1));\n  $-local-lightness: ($-local-red * 0.2126 + $-local-green * 0.7152 + $-local-blue * 0.0722) / 255;\n\n  @return $-local-lightness > 0.6;\n}\n","@charset \"UTF-8\";\n\n/// Checks for a valid number.\n///\n/// @param {Number} $value\n///\n/// @require {function} contains\n\n@function is-number($value) {\n  @return contains(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" 0 1 2 3 4 5 6 7 8 9, $value);\n}\n","@charset \"UTF-8\";\n\n/// Checks for a valid CSS size.\n///\n/// @param {String} $value\n///\n/// @require {function} contains\n/// @require {function} is-length\n\n@function is-size($value) {\n  @return is-length($value)\n          or contains(\"fill\" \"fit-content\" \"min-content\" \"max-content\", $value);\n}\n","// Convert pixels to ems\n// eg. for a relational value of 12px write em(12) when the parent is 16px\n// if the parent is another value say 24px write em(12, 24)\n\n@function em($pxval, $base: $em-base) {\n  @if not unitless($pxval) {\n    $pxval: strip-units($pxval);\n  }\n  @if not unitless($base) {\n    $base: strip-units($base);\n  }\n  @return ($pxval / $base) * 1em;\n}\n","// Convert pixels to rems\n// eg. for a relational value of 12px write rem(12)\n// Assumes $em-base is the font-size of <html>\n\n@function rem($pxval) {\n  @if not unitless($pxval) {\n    $pxval: strip-units($pxval);\n  }\n\n  $base: $em-base;\n  @if not unitless($base) {\n    $base: strip-units($base);\n  }\n  @return ($pxval / $base) * 1rem;\n}\n","@charset \"UTF-8\";\n\n/// Mixes a color with black.\n///\n/// @param {Color} $color\n///\n/// @param {Number (Percentage)} $percent\n///   The amount of black to be mixed in.\n///\n/// @example scss - Usage\n///   .element {\n///     background-color: shade(#ffbb52, 60%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     background-color: #664a20;\n///   }\n///\n/// @return {Color}\n\n@function shade($color, $percent) {\n  @return mix(#000, $color, $percent);\n}\n","@charset \"UTF-8\";\n\n/// Strips the unit from a number.\n///\n/// @param {Number (With Unit)} $value\n///\n/// @example scss - Usage\n///   $dimension: strip-units(10em);\n///\n/// @example css - CSS Output\n///   $dimension: 10;\n///\n/// @return {Number (Unitless)}\n\n@function strip-units($value) {\n  @return ($value / ($value * 0 + 1));\n}\n","@charset \"UTF-8\";\n\n/// Mixes a color with white.\n///\n/// @param {Color} $color\n///\n/// @param {Number (Percentage)} $percent\n///   The amount of white to be mixed in.\n///\n/// @example scss - Usage\n///   .element {\n///     background-color: tint(#6ecaa6, 40%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     background-color: #a8dfc9;\n///   }\n///\n/// @return {Color}\n\n@function tint($color, $percent) {\n  @return mix(#fff, $color, $percent);\n}\n","// Return vendor-prefixed property names if appropriate\n// Example: transition-property-names((transform, color, background), moz) -> -moz-transform, color, background\n//************************************************************************//\n@function transition-property-names($props, $vendor: false) {\n  $new-props: ();\n\n  @each $prop in $props {\n    $new-props: append($new-props, transition-property-name($prop, $vendor), comma);\n  }\n\n  @return $new-props;\n}\n\n@function transition-property-name($prop, $vendor: false) {\n  // put other properties that need to be prefixed here aswell\n  @if $vendor and $prop == transform {\n    @return unquote('-'+$vendor+'-'+$prop);\n  }\n  @else {\n    @return $prop;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Converts shorthand to the 4-value syntax.\n///\n/// @param {List} $shorthand\n///\n/// @example scss - Usage\n///   .element {\n///     margin: unpack(1em 2em);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     margin: 1em 2em 1em 2em;\n///   }\n\n@function unpack($shorthand) {\n  @if length($shorthand) == 1 {\n    @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);\n  } @else if length($shorthand) == 2 {\n    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);\n  } @else if length($shorthand) == 3 {\n    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);\n  } @else {\n    @return $shorthand;\n  }\n}\n","// Scaling Variables\n$golden:           1.618;\n$minor-second:     1.067;\n$major-second:     1.125;\n$minor-third:      1.2;\n$major-third:      1.25;\n$perfect-fourth:   1.333;\n$augmented-fourth: 1.414;\n$perfect-fifth:    1.5;\n$minor-sixth:      1.6;\n$major-sixth:      1.667;\n$minor-seventh:    1.778;\n$major-seventh:    1.875;\n$octave:           2;\n$major-tenth:      2.5;\n$major-eleventh:   2.667;\n$major-twelfth:    3;\n$double-octave:    4;\n\n$modular-scale-ratio: $perfect-fourth !default;\n$modular-scale-base: em($em-base) !default;\n\n@function modular-scale($increment, $value: $modular-scale-base, $ratio: $modular-scale-ratio) {\n  $v1: nth($value, 1);\n  $v2: nth($value, length($value));\n  $value: $v1;\n\n  // scale $v2 to just above $v1\n  @while $v2 > $v1 {\n    $v2: ($v2 / $ratio); // will be off-by-1\n  }\n  @while $v2 < $v1 {\n    $v2: ($v2 * $ratio); // will fix off-by-1\n  }\n\n  // check AFTER scaling $v2 to prevent double-counting corner-case\n  $double-stranded: $v2 > $v1;\n\n  @if $increment > 0 {\n    @for $i from 1 through $increment {\n      @if $double-stranded and ($v1 * $ratio) > $v2 {\n        $value: $v2;\n        $v2: ($v2 * $ratio);\n      } @else {\n        $v1: ($v1 * $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @if $increment < 0 {\n    // adjust $v2 to just below $v1\n    @if $double-stranded {\n      $v2: ($v2 / $ratio);\n    }\n\n    @for $i from $increment through -1 {\n      @if $double-stranded and ($v1 / $ratio) < $v2 {\n        $value: $v2;\n        $v2: ($v2 / $ratio);\n      } @else {\n        $v1: ($v1 / $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @return $value;\n}\n","//************************************************************************//\n// Helper function for str-to-num fn.\n// Source: http://sassmeister.com/gist/9647408\n//************************************************************************//\n@function _convert-units($number, $unit) {\n  $strings: \"px\", \"cm\", \"mm\", \"%\", \"ch\", \"pica\", \"in\", \"em\", \"rem\", \"pt\", \"pc\", \"ex\", \"vw\", \"vh\", \"vmin\", \"vmax\", \"deg\", \"rad\", \"grad\", \"turn\";\n  $units:   1px, 1cm, 1mm, 1%, 1ch, 1pica, 1in, 1em, 1rem, 1pt, 1pc, 1ex, 1vw, 1vh, 1vmin, 1vmax, 1deg, 1rad, 1grad, 1turn;\n  $index: index($strings, $unit);\n\n  @if not $index {\n    @warn \"Unknown unit `#{$unit}`.\";\n    @return false;\n  }\n\n  @if type-of($number) != \"number\" {\n    @warn \"`#{$number} is not a number`\";\n    @return false;\n  }\n\n  @return $number * nth($units, $index);\n}\n","@charset \"UTF-8\";\n\n/// Directional-property mixins are shorthands for writing properties like the following\n///\n/// @ignore You can also use `false` instead of `null`.\n///\n/// @param {List} $vals\n///   List of directional values\n///\n/// @example scss - Usage\n///   .element {\n///     @include border-style(dotted null);\n///     @include margin(null 0 10px);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     border-bottom-style: dotted;\n///     border-top-style: dotted;\n///     margin-bottom: 10px;\n///     margin-left: 0;\n///     margin-right: 0;\n///   }\n///\n/// @require {function} contains-falsy\n///\n/// @return {List}\n\n@function collapse-directionals($vals) {\n  $output: null;\n\n  $a: nth($vals, 1);\n  $b: if(length($vals) < 2, $a, nth($vals, 2));\n  $c: if(length($vals) < 3, $a, nth($vals, 3));\n  $d: if(length($vals) < 2, $a, nth($vals, if(length($vals) < 4, 2, 4)));\n\n  @if $a == 0 { $a: 0; }\n  @if $b == 0 { $b: 0; }\n  @if $c == 0 { $c: 0; }\n  @if $d == 0 { $d: 0; }\n\n  @if $a == $b and $a == $c and $a == $d { $output: $a;          }\n  @else if $a == $c and $b == $d         { $output: $a $b;       }\n  @else if $b == $d                      { $output: $a $b $c;    }\n  @else                                  { $output: $a $b $c $d; }\n\n  @return $output;\n}\n\n/// Output directional properties, for instance `margin`.\n///\n/// @access private\n///\n/// @param {String} $pre\n///   Prefix to use\n/// @param {String} $suf\n///   Suffix to use\n/// @param {List} $vals\n///   List of values\n///\n/// @require {function} collapse-directionals\n/// @require {function} contains-falsy\n\n@mixin directional-property($pre, $suf, $vals) {\n  // Property Names\n  $top:    $pre + \"-top\"    + if($suf, \"-#{$suf}\", \"\");\n  $bottom: $pre + \"-bottom\" + if($suf, \"-#{$suf}\", \"\");\n  $left:   $pre + \"-left\"   + if($suf, \"-#{$suf}\", \"\");\n  $right:  $pre + \"-right\"  + if($suf, \"-#{$suf}\", \"\");\n  $all:    $pre +             if($suf, \"-#{$suf}\", \"\");\n\n  $vals: collapse-directionals($vals);\n\n  @if contains-falsy($vals) {\n    @if nth($vals, 1) { #{$top}: nth($vals, 1); }\n\n    @if length($vals) == 1 {\n      @if nth($vals, 1) { #{$right}: nth($vals, 1); }\n    } @else {\n      @if nth($vals, 2) { #{$right}: nth($vals, 2); }\n    }\n\n    @if length($vals) == 2 {\n      @if nth($vals, 1) { #{$bottom}: nth($vals, 1); }\n      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }\n    } @else if length($vals) == 3 {\n      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }\n      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }\n    } @else if length($vals) == 4 {\n      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }\n      @if nth($vals, 4) { #{$left}:   nth($vals, 4); }\n    }\n  } @else {\n    #{$all}: $vals;\n  }\n}\n","// Used for creating the source string for fonts using @font-face\n// Reference: http://goo.gl/Ru1bKP\n\n@function font-url-prefixer($asset-pipeline) {\n  @if $asset-pipeline == true {\n    @return font-url;\n  } @else {\n    @return url;\n  }\n}\n\n@function font-source-declaration(\n  $font-family,\n  $file-path,\n  $asset-pipeline,\n  $file-formats,\n  $font-url) {\n\n  $src: ();\n\n  $formats-map: (\n    eot:   \"#{$file-path}.eot?#iefix\" format(\"embedded-opentype\"),\n    woff2: \"#{$file-path}.woff2\" format(\"woff2\"),\n    woff:  \"#{$file-path}.woff\" format(\"woff\"),\n    ttf:   \"#{$file-path}.ttf\" format(\"truetype\"),\n    svg:   \"#{$file-path}.svg##{$font-family}\" format(\"svg\")\n  );\n\n  @each $key, $values in $formats-map {\n    @if contains($file-formats, $key) {\n      $file-path: nth($values, 1);\n      $font-format: nth($values, 2);\n\n      @if $asset-pipeline == true {\n        $src: append($src, font-url($file-path) $font-format, comma);\n      } @else {\n        $src: append($src, url($file-path) $font-format, comma);\n      }\n    }\n  }\n\n  @return $src;\n}\n","@function _gradient-positions-parser($gradient-type, $gradient-positions) {\n  @if $gradient-positions\n  and ($gradient-type == linear)\n  and (type-of($gradient-positions) != color) {\n    $gradient-positions: _linear-positions-parser($gradient-positions);\n  }\n  @else if $gradient-positions\n  and ($gradient-type == radial)\n  and (type-of($gradient-positions) != color) {\n    $gradient-positions: _radial-positions-parser($gradient-positions);\n  }\n  @return $gradient-positions;\n}\n","// Private function for linear-gradient-parser\n@function _linear-angle-parser($image, $first-val, $prefix, $suffix) {\n  $offset: null;\n  $unit-short:  str-slice($first-val, str-length($first-val) - 2, str-length($first-val));\n  $unit-long:   str-slice($first-val, str-length($first-val) - 3, str-length($first-val));\n\n  @if ($unit-long == \"grad\") or\n      ($unit-long == \"turn\") {\n    $offset: if($unit-long == \"grad\", -100grad * 3, -0.75turn);\n  }\n\n  @else if ($unit-short == \"deg\") or\n           ($unit-short == \"rad\") {\n    $offset: if($unit-short == \"deg\", -90 * 3, 1.6rad);\n  }\n\n  @if $offset {\n    $num: _str-to-num($first-val);\n\n    @return (\n      webkit-image: -webkit- + $prefix + ($offset - $num) + $suffix,\n      spec-image: $image\n    );\n  }\n}\n","@function _linear-gradient-parser($image) {\n  $image: unquote($image);\n  $gradients: ();\n  $start: str-index($image, \"(\");\n  $end: str-index($image, \",\");\n  $first-val: str-slice($image, $start + 1, $end - 1);\n\n  $prefix: str-slice($image, 1, $start);\n  $suffix: str-slice($image, $end, str-length($image));\n\n  $has-multiple-vals: str-index($first-val, \" \");\n  $has-single-position: unquote(_position-flipper($first-val) + \"\");\n  $has-angle: is-number(str-slice($first-val, 1, 1));\n\n  @if $has-multiple-vals {\n    $gradients: _linear-side-corner-parser($image, $first-val, $prefix, $suffix, $has-multiple-vals);\n  }\n\n  @else if $has-single-position != \"\" {\n    $pos: unquote($has-single-position + \"\");\n\n    $gradients: (\n      webkit-image: -webkit- + $image,\n      spec-image: $prefix + \"to \" + $pos + $suffix\n    );\n  }\n\n  @else if $has-angle {\n    // Rotate degree for webkit\n    $gradients: _linear-angle-parser($image, $first-val, $prefix, $suffix);\n  }\n\n  @else {\n    $gradients: (\n      webkit-image: -webkit- + $image,\n      spec-image: $image\n    );\n  }\n\n  @return $gradients;\n}\n","@function _linear-positions-parser($pos) {\n  $type: type-of(nth($pos, 1));\n  $spec: null;\n  $degree: null;\n  $side: null;\n  $corner: null;\n  $length: length($pos);\n  // Parse Side and corner positions\n  @if ($length > 1) {\n    @if nth($pos, 1) == \"to\" { // Newer syntax\n      $side: nth($pos, 2);\n\n      @if $length == 2 { // eg. to top\n        // Swap for backwards compatibility\n        $degree: _position-flipper(nth($pos, 2));\n      }\n      @else if $length == 3 { // eg. to top left\n        $corner: nth($pos, 3);\n      }\n    }\n    @else if $length == 2 { // Older syntax (\"top left\")\n      $side: _position-flipper(nth($pos, 1));\n      $corner: _position-flipper(nth($pos, 2));\n    }\n\n    @if (\"#{$side} #{$corner}\" == \"left top\") or (\"#{$side} #{$corner}\" == \"top left\") {\n      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});\n    }\n    @else if (\"#{$side} #{$corner}\" == \"right top\") or (\"#{$side} #{$corner}\" == \"top right\") {\n      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});\n    }\n    @else if (\"#{$side} #{$corner}\" == \"right bottom\") or (\"#{$side} #{$corner}\" == \"bottom right\") {\n      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});\n    }\n    @else if (\"#{$side} #{$corner}\" == \"left bottom\") or (\"#{$side} #{$corner}\" == \"bottom left\") {\n      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});\n    }\n    $spec: to $side $corner;\n  }\n  @else if $length == 1 {\n    // Swap for backwards compatibility\n    @if $type == string {\n      $degree: $pos;\n      $spec: to _position-flipper($pos);\n    }\n    @else {\n      $degree: -270 - $pos; //rotate the gradient opposite from spec\n      $spec: $pos;\n    }\n  }\n  $degree: unquote($degree + \",\");\n  $spec:   unquote($spec + \",\");\n  @return $degree $spec;\n}\n\n@function _position-flipper($pos) {\n  @return if($pos == left, right, null)\n         if($pos == right, left, null)\n         if($pos == top, bottom, null)\n         if($pos == bottom, top, null);\n}\n","// Private function for linear-gradient-parser\n@function _linear-side-corner-parser($image, $first-val, $prefix, $suffix, $has-multiple-vals) {\n  $val-1: str-slice($first-val, 1, $has-multiple-vals - 1);\n  $val-2: str-slice($first-val, $has-multiple-vals + 1, str-length($first-val));\n  $val-3: null;\n  $has-val-3: str-index($val-2, \" \");\n\n  @if $has-val-3 {\n    $val-3: str-slice($val-2, $has-val-3 + 1, str-length($val-2));\n    $val-2: str-slice($val-2, 1, $has-val-3 - 1);\n  }\n\n  $pos: _position-flipper($val-1) _position-flipper($val-2) _position-flipper($val-3);\n  $pos: unquote($pos + \"\");\n\n  // Use old spec for webkit\n  @if $val-1 == \"to\" {\n    @return (\n      webkit-image: -webkit- + $prefix + $pos + $suffix,\n      spec-image: $image\n    );\n  }\n\n  // Bring the code up to spec\n  @else {\n    @return (\n      webkit-image: -webkit- + $image,\n      spec-image: $prefix + \"to \" + $pos + $suffix\n    );\n  }\n}\n","@function _radial-arg-parser($g1, $g2, $pos, $shape-size) {\n  @each $value in $g1, $g2 {\n    $first-val: nth($value, 1);\n    $pos-type:  type-of($first-val);\n    $spec-at-index: null;\n\n    // Determine if spec was passed to mixin\n    @if type-of($value) == list {\n      $spec-at-index: if(index($value, at), index($value, at), false);\n    }\n    @if $spec-at-index {\n      @if $spec-at-index > 1 {\n        @for $i from 1 through ($spec-at-index - 1) {\n          $shape-size: $shape-size nth($value, $i);\n        }\n        @for $i from ($spec-at-index + 1) through length($value) {\n          $pos: $pos nth($value, $i);\n        }\n      }\n      @else if $spec-at-index == 1 {\n        @for $i from ($spec-at-index + 1) through length($value) {\n          $pos: $pos nth($value, $i);\n        }\n      }\n      $g1: null;\n    }\n\n    // If not spec calculate correct values\n    @else {\n      @if ($pos-type != color) or ($first-val != \"transparent\") {\n        @if ($pos-type == number)\n        or ($first-val == \"center\")\n        or ($first-val == \"top\")\n        or ($first-val == \"right\")\n        or ($first-val == \"bottom\")\n        or ($first-val == \"left\") {\n\n          $pos: $value;\n\n          @if $pos == $g1 {\n            $g1: null;\n          }\n        }\n\n        @else if\n           ($first-val == \"ellipse\")\n        or ($first-val == \"circle\")\n        or ($first-val == \"closest-side\")\n        or ($first-val == \"closest-corner\")\n        or ($first-val == \"farthest-side\")\n        or ($first-val == \"farthest-corner\")\n        or ($first-val == \"contain\")\n        or ($first-val == \"cover\") {\n\n          $shape-size: $value;\n\n          @if $value == $g1 {\n            $g1: null;\n          }\n\n          @else if $value == $g2 {\n            $g2: null;\n          }\n        }\n      }\n    }\n  }\n  @return $g1, $g2, $pos, $shape-size;\n}\n","@function _radial-positions-parser($gradient-pos) {\n  $shape-size: nth($gradient-pos, 1);\n  $pos:        nth($gradient-pos, 2);\n  $shape-size-spec: _shape-size-stripper($shape-size);\n\n  $pre-spec: unquote(if($pos, \"#{$pos}, \", null))\n             unquote(if($shape-size, \"#{$shape-size},\", null));\n  $pos-spec: if($pos, \"at #{$pos}\", null);\n\n  $spec: \"#{$shape-size-spec} #{$pos-spec}\";\n\n  // Add comma\n  @if ($spec != \"  \") {\n    $spec: \"#{$spec},\";\n  }\n\n  @return $pre-spec $spec;\n}\n","@function _radial-gradient-parser($image) {\n  $image: unquote($image);\n  $gradients: ();\n  $start: str-index($image, \"(\");\n  $end: str-index($image, \",\");\n  $first-val: str-slice($image, $start + 1, $end - 1);\n\n  $prefix: str-slice($image, 1, $start);\n  $suffix: str-slice($image, $end, str-length($image));\n\n  $is-spec-syntax: str-index($first-val, \"at\");\n\n  @if $is-spec-syntax and $is-spec-syntax > 1 {\n    $keyword: str-slice($first-val, 1, $is-spec-syntax - 2);\n    $pos: str-slice($first-val, $is-spec-syntax + 3, str-length($first-val));\n    $pos: append($pos, $keyword, comma);\n\n    $gradients: (\n      webkit-image: -webkit- + $prefix + $pos + $suffix,\n      spec-image: $image\n    );\n  }\n\n  @else if $is-spec-syntax == 1 {\n    $pos: str-slice($first-val, $is-spec-syntax + 3, str-length($first-val));\n\n    $gradients: (\n      webkit-image: -webkit- + $prefix + $pos + $suffix,\n      spec-image: $image\n    );\n  }\n\n  @else if str-index($image, \"cover\") or str-index($image, \"contain\") {\n    @warn \"Radial-gradient needs to be updated to conform to latest spec.\";\n\n    $gradients: (\n      webkit-image: null,\n      spec-image: $image\n    );\n  }\n\n  @else {\n    $gradients: (\n      webkit-image: -webkit- + $image,\n      spec-image: $image\n    );\n  }\n\n  @return $gradients;\n}\n","// User for linear and radial gradients within background-image or border-image properties\n\n@function _render-gradients($gradient-positions, $gradients, $gradient-type, $vendor: false) {\n  $pre-spec: null;\n  $spec: null;\n  $vendor-gradients: null;\n  @if $gradient-type == linear {\n    @if $gradient-positions {\n      $pre-spec: nth($gradient-positions, 1);\n      $spec:     nth($gradient-positions, 2);\n    }\n  }\n  @else if $gradient-type == radial {\n    $pre-spec: nth($gradient-positions, 1);\n    $spec:     nth($gradient-positions, 2);\n  }\n\n  @if $vendor {\n    $vendor-gradients: -#{$vendor}-#{$gradient-type}-gradient(#{$pre-spec} $gradients);\n  }\n  @else if $vendor == false {\n    $vendor-gradients: \"#{$gradient-type}-gradient(#{$spec} #{$gradients})\";\n    $vendor-gradients: unquote($vendor-gradients);\n  }\n  @return $vendor-gradients;\n}\n","@function _shape-size-stripper($shape-size) {\n  $shape-size-spec: null;\n  @each $value in $shape-size {\n    @if ($value == \"cover\") or ($value == \"contain\") {\n      $value: null;\n    }\n    $shape-size-spec: \"#{$shape-size-spec} #{$value}\";\n  }\n  @return $shape-size-spec;\n}\n","//************************************************************************//\n// Helper function for linear/radial-gradient-parsers.\n// Source: http://sassmeister.com/gist/9647408\n//************************************************************************//\n@function _str-to-num($string) {\n  // Matrices\n  $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\n  $numbers:  0   1   2   3   4   5   6   7   8   9;\n\n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n\n    @if $character == \"-\" {\n      $minus: true;\n    }\n\n    @else if $character == \".\" {\n      $divider: 1;\n    }\n\n    @else {\n      @if not $index {\n        $result: if($minus, $result * -1, $result);\n        @return _convert-units($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n\n      @if $divider == 0 {\n        $result: $result * 10;\n      }\n\n      @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n\n      $result: $result + $number;\n    }\n  }\n  @return if($minus, $result * -1, $result);\n}\n","// http://www.w3.org/TR/css3-animations/#the-animation-name-property-\n// Each of these mixins support comma separated lists of values, which allows different transitions for individual properties to be described in a single style rule. Each value in the list corresponds to the value at that same position in the other properties.\n\n@mixin animation($animations...) {\n  @include prefixer(animation, $animations, webkit moz spec);\n}\n\n@mixin animation-name($names...) {\n  @include prefixer(animation-name, $names, webkit moz spec);\n}\n\n@mixin animation-duration($times...) {\n  @include prefixer(animation-duration, $times, webkit moz spec);\n}\n\n@mixin animation-timing-function($motions...) {\n  // ease | linear | ease-in | ease-out | ease-in-out\n  @include prefixer(animation-timing-function, $motions, webkit moz spec);\n}\n\n@mixin animation-iteration-count($values...) {\n  // infinite | <number>\n  @include prefixer(animation-iteration-count, $values, webkit moz spec);\n}\n\n@mixin animation-direction($directions...) {\n  // normal | alternate\n  @include prefixer(animation-direction, $directions, webkit moz spec);\n}\n\n@mixin animation-play-state($states...) {\n  // running | paused\n  @include prefixer(animation-play-state, $states, webkit moz spec);\n}\n\n@mixin animation-delay($times...) {\n  @include prefixer(animation-delay, $times, webkit moz spec);\n}\n\n@mixin animation-fill-mode($modes...) {\n  // none | forwards | backwards | both\n  @include prefixer(animation-fill-mode, $modes, webkit moz spec);\n}\n","@mixin appearance($value) {\n  @include prefixer(appearance, $value, webkit moz ms o spec);\n}\n","@mixin backface-visibility($visibility) {\n  @include prefixer(backface-visibility, $visibility, webkit spec);\n}\n","//************************************************************************//\n// Background property for adding multiple backgrounds using shorthand\n// notation.\n//************************************************************************//\n\n@mixin background($backgrounds...) {\n  $webkit-backgrounds: ();\n  $spec-backgrounds: ();\n\n  @each $background in $backgrounds {\n    $webkit-background: ();\n    $spec-background: ();\n    $background-type: type-of($background);\n\n    @if $background-type == string or $background-type == list {\n      $background-str: if($background-type == list, nth($background, 1), $background);\n\n      $url-str:       str-slice($background-str, 1, 3);\n      $gradient-type: str-slice($background-str, 1, 6);\n\n      @if $url-str == \"url\" {\n        $webkit-background: $background;\n        $spec-background:   $background;\n      }\n\n      @else if $gradient-type == \"linear\" {\n        $gradients: _linear-gradient-parser(\"#{$background}\");\n        $webkit-background: map-get($gradients, webkit-image);\n        $spec-background:   map-get($gradients, spec-image);\n      }\n\n      @else if $gradient-type == \"radial\" {\n        $gradients: _radial-gradient-parser(\"#{$background}\");\n        $webkit-background: map-get($gradients, webkit-image);\n        $spec-background:   map-get($gradients, spec-image);\n      }\n\n      @else {\n        $webkit-background: $background;\n        $spec-background:   $background;\n      }\n    }\n\n    @else {\n      $webkit-background: $background;\n      $spec-background:   $background;\n    }\n\n    $webkit-backgrounds: append($webkit-backgrounds, $webkit-background, comma);\n    $spec-backgrounds:   append($spec-backgrounds,   $spec-background,   comma);\n  }\n\n  background: $webkit-backgrounds;\n  background: $spec-backgrounds;\n}\n","//************************************************************************//\n// Background-image property for adding multiple background images with\n// gradients, or for stringing multiple gradients together.\n//************************************************************************//\n\n@mixin background-image($images...) {\n  $webkit-images: ();\n  $spec-images: ();\n\n  @each $image in $images {\n    $webkit-image: ();\n    $spec-image: ();\n\n    @if (type-of($image) == string) {\n      $url-str:       str-slice($image, 1, 3);\n      $gradient-type: str-slice($image, 1, 6);\n\n      @if $url-str == \"url\" {\n        $webkit-image: $image;\n        $spec-image:   $image;\n      }\n\n      @else if $gradient-type == \"linear\" {\n        $gradients: _linear-gradient-parser($image);\n        $webkit-image:  map-get($gradients, webkit-image);\n        $spec-image:    map-get($gradients, spec-image);\n      }\n\n      @else if $gradient-type == \"radial\" {\n        $gradients: _radial-gradient-parser($image);\n        $webkit-image: map-get($gradients, webkit-image);\n        $spec-image:   map-get($gradients, spec-image);\n      }\n    }\n\n    $webkit-images: append($webkit-images, $webkit-image, comma);\n    $spec-images:   append($spec-images,   $spec-image,   comma);\n  }\n\n  background-image: $webkit-images;\n  background-image: $spec-images;\n}\n","@mixin border-image($borders...) {\n  $webkit-borders: ();\n  $spec-borders: ();\n\n  @each $border in $borders {\n    $webkit-border: ();\n    $spec-border: ();\n    $border-type: type-of($border);\n\n    @if $border-type == string or list {\n      $border-str: if($border-type == list, nth($border, 1), $border);\n\n      $url-str:       str-slice($border-str, 1, 3);\n      $gradient-type: str-slice($border-str, 1, 6);\n\n      @if $url-str == \"url\" {\n        $webkit-border: $border;\n        $spec-border:   $border;\n      }\n\n      @else if $gradient-type == \"linear\" {\n        $gradients: _linear-gradient-parser(\"#{$border}\");\n        $webkit-border: map-get($gradients, webkit-image);\n        $spec-border:   map-get($gradients, spec-image);\n      }\n\n      @else if $gradient-type == \"radial\" {\n        $gradients: _radial-gradient-parser(\"#{$border}\");\n        $webkit-border: map-get($gradients, webkit-image);\n        $spec-border:   map-get($gradients, spec-image);\n      }\n\n      @else {\n        $webkit-border: $border;\n        $spec-border:   $border;\n      }\n    }\n\n    @else {\n      $webkit-border: $border;\n      $spec-border:   $border;\n    }\n\n    $webkit-borders: append($webkit-borders, $webkit-border, comma);\n    $spec-borders:   append($spec-borders,   $spec-border,   comma);\n  }\n\n  -webkit-border-image: $webkit-borders;\n          border-image: $spec-borders;\n          border-style: solid;\n}\n\n//Examples:\n// @include border-image(url(\"image.png\"));\n// @include border-image(url(\"image.png\") 20 stretch);\n// @include border-image(linear-gradient(45deg, orange, yellow));\n// @include border-image(linear-gradient(45deg, orange, yellow) stretch);\n// @include border-image(linear-gradient(45deg, orange, yellow) 20 30 40 50 stretch round);\n// @include border-image(radial-gradient(top, cover, orange, yellow, orange));\n","@mixin calc($property, $value) {\n  #{$property}: -webkit-calc(#{$value});\n  #{$property}: calc(#{$value});\n}\n","@mixin columns($arg: auto) {\n  // <column-count> || <column-width>\n  @include prefixer(columns, $arg, webkit moz spec);\n}\n\n@mixin column-count($int: auto) {\n  // auto || integer\n  @include prefixer(column-count, $int, webkit moz spec);\n}\n\n@mixin column-gap($length: normal) {\n  // normal || length\n  @include prefixer(column-gap, $length, webkit moz spec);\n}\n\n@mixin column-fill($arg: auto) {\n  // auto || length\n  @include prefixer(column-fill, $arg, webkit moz spec);\n}\n\n@mixin column-rule($arg) {\n  // <border-width> || <border-style> || <color>\n  @include prefixer(column-rule, $arg, webkit moz spec);\n}\n\n@mixin column-rule-color($color) {\n  @include prefixer(column-rule-color, $color, webkit moz spec);\n}\n\n@mixin column-rule-style($style: none) {\n  // none | hidden | dashed | dotted | double | groove | inset | inset | outset | ridge | solid\n  @include prefixer(column-rule-style, $style, webkit moz spec);\n}\n\n@mixin column-rule-width ($width: none) {\n  @include prefixer(column-rule-width, $width, webkit moz spec);\n}\n\n@mixin column-span($arg: none) {\n  // none || all\n  @include prefixer(column-span, $arg, webkit moz spec);\n}\n\n@mixin column-width($length: auto) {\n  // auto || length\n  @include prefixer(column-width, $length, webkit moz spec);\n}\n","@mixin filter($function: none) {\n  // <filter-function> [<filter-function]* | none\n  @include prefixer(filter, $function, webkit spec);\n}\n","// CSS3 Flexible Box Model and property defaults\n\n// Custom shorthand notation for flexbox\n@mixin box($orient: inline-axis, $pack: start, $align: stretch) {\n  @include display-box;\n  @include box-orient($orient);\n  @include box-pack($pack);\n  @include box-align($align);\n}\n\n@mixin display-box {\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-flexbox; // IE 10\n  display: box;\n}\n\n@mixin box-orient($orient: inline-axis) {\n// horizontal|vertical|inline-axis|block-axis|inherit\n  @include prefixer(box-orient, $orient, webkit moz spec);\n}\n\n@mixin box-pack($pack: start) {\n// start|end|center|justify\n  @include prefixer(box-pack, $pack, webkit moz spec);\n  -ms-flex-pack: $pack; // IE 10\n}\n\n@mixin box-align($align: stretch) {\n// start|end|center|baseline|stretch\n  @include prefixer(box-align, $align, webkit moz spec);\n  -ms-flex-align: $align; // IE 10\n}\n\n@mixin box-direction($direction: normal) {\n// normal|reverse|inherit\n  @include prefixer(box-direction, $direction, webkit moz spec);\n  -ms-flex-direction: $direction; // IE 10\n}\n\n@mixin box-lines($lines: single) {\n// single|multiple\n  @include prefixer(box-lines, $lines, webkit moz spec);\n}\n\n@mixin box-ordinal-group($int: 1) {\n  @include prefixer(box-ordinal-group, $int, webkit moz spec);\n  -ms-flex-order: $int; // IE 10\n}\n\n@mixin box-flex($value: 0) {\n  @include prefixer(box-flex, $value, webkit moz spec);\n  -ms-flex: $value; // IE 10\n}\n\n@mixin box-flex-group($int: 1) {\n  @include prefixer(box-flex-group, $int, webkit moz spec);\n}\n\n// CSS3 Flexible Box Model and property defaults\n// Unified attributes for 2009, 2011, and 2012 flavours.\n\n// 2009 - display (box | inline-box)\n// 2011 - display (flexbox | inline-flexbox)\n// 2012 - display (flex | inline-flex)\n@mixin display($value) {\n// flex | inline-flex\n  @if $value == \"flex\" {\n    // 2009\n    display: -webkit-box;\n    display: -moz-box;\n    display: box;\n\n    // 2012\n    display: -webkit-flex;\n    display: -moz-flex;\n    display: -ms-flexbox; // 2011 (IE 10)\n    display: flex;\n  } @else if $value == \"inline-flex\" {\n    display: -webkit-inline-box;\n    display: -moz-inline-box;\n    display: inline-box;\n\n    display: -webkit-inline-flex;\n    display: -moz-inline-flex;\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n  } @else {\n    display: $value;\n  }\n}\n\n// 2009 - box-flex (integer)\n// 2011 - flex (decimal | width decimal)\n// 2012 - flex (integer integer width)\n@mixin flex($value) {\n\n  // Grab flex-grow for older browsers.\n  $flex-grow: nth($value, 1);\n\n  // 2009\n  @include prefixer(box-flex, $flex-grow, webkit moz spec);\n\n  // 2011 (IE 10), 2012\n  @include prefixer(flex, $value, webkit moz ms spec);\n}\n\n// 2009 - box-orient ( horizontal | vertical | inline-axis | block-axis)\n//      - box-direction (normal | reverse)\n// 2011 - flex-direction (row | row-reverse | column | column-reverse)\n// 2012 - flex-direction (row | row-reverse | column | column-reverse)\n@mixin flex-direction($value: row) {\n\n  // Alt values.\n  $value-2009: $value;\n  $value-2011: $value;\n  $direction: normal;\n\n  @if $value == row {\n    $value-2009: horizontal;\n  } @else if $value == \"row-reverse\" {\n    $value-2009: horizontal;\n    $direction: reverse;\n  } @else if $value == column {\n    $value-2009: vertical;\n  } @else if $value == \"column-reverse\" {\n    $value-2009: vertical;\n    $direction: reverse;\n  }\n\n  // 2009\n  @include prefixer(box-orient, $value-2009, webkit moz spec);\n  @include prefixer(box-direction, $direction, webkit moz spec);\n\n  // 2012\n  @include prefixer(flex-direction, $value, webkit moz spec);\n\n  // 2011 (IE 10)\n  -ms-flex-direction: $value;\n}\n\n// 2009 - box-lines (single | multiple)\n// 2011 - flex-wrap (nowrap | wrap | wrap-reverse)\n// 2012 - flex-wrap (nowrap | wrap | wrap-reverse)\n@mixin flex-wrap($value: nowrap) {\n  // Alt values\n  $alt-value: $value;\n  @if $value == nowrap {\n    $alt-value: single;\n  } @else if $value == wrap {\n    $alt-value: multiple;\n  } @else if $value == \"wrap-reverse\" {\n    $alt-value: multiple;\n  }\n\n  @include prefixer(box-lines, $alt-value, webkit moz spec);\n  @include prefixer(flex-wrap, $value, webkit moz ms spec);\n}\n\n// 2009 - TODO: parse values into flex-direction/flex-wrap\n// 2011 - TODO: parse values into flex-direction/flex-wrap\n// 2012 - flex-flow (flex-direction || flex-wrap)\n@mixin flex-flow($value) {\n  @include prefixer(flex-flow, $value, webkit moz spec);\n}\n\n// 2009 - box-ordinal-group (integer)\n// 2011 - flex-order (integer)\n// 2012 - order (integer)\n@mixin order($int: 0) {\n  // 2009\n  @include prefixer(box-ordinal-group, $int, webkit moz spec);\n\n  // 2012\n  @include prefixer(order, $int, webkit moz spec);\n\n  // 2011 (IE 10)\n  -ms-flex-order: $int;\n}\n\n// 2012 - flex-grow (number)\n@mixin flex-grow($number: 0) {\n  @include prefixer(flex-grow, $number, webkit moz spec);\n  -ms-flex-positive: $number;\n}\n\n// 2012 - flex-shrink (number)\n@mixin flex-shrink($number: 1) {\n  @include prefixer(flex-shrink, $number, webkit moz spec);\n  -ms-flex-negative: $number;\n}\n\n// 2012 - flex-basis (number)\n@mixin flex-basis($width: auto) {\n  @include prefixer(flex-basis, $width, webkit moz spec);\n  -ms-flex-preferred-size: $width;\n}\n\n// 2009 - box-pack (start | end | center | justify)\n// 2011 - flex-pack (start | end | center | justify)\n// 2012 - justify-content (flex-start | flex-end | center | space-between | space-around)\n@mixin justify-content($value: flex-start) {\n\n  // Alt values.\n  $alt-value: $value;\n  @if $value == \"flex-start\" {\n    $alt-value: start;\n  } @else if $value == \"flex-end\" {\n    $alt-value: end;\n  } @else if $value == \"space-between\" {\n    $alt-value: justify;\n  } @else if $value == \"space-around\" {\n    $alt-value: distribute;\n  }\n\n  // 2009\n  @include prefixer(box-pack, $alt-value, webkit moz spec);\n\n  // 2012\n  @include prefixer(justify-content, $value, webkit moz ms o spec);\n\n  // 2011 (IE 10)\n  -ms-flex-pack: $alt-value;\n}\n\n// 2009 - box-align (start | end | center | baseline | stretch)\n// 2011 - flex-align (start | end | center | baseline | stretch)\n// 2012 - align-items (flex-start | flex-end | center | baseline | stretch)\n@mixin align-items($value: stretch) {\n\n  $alt-value: $value;\n\n  @if $value == \"flex-start\" {\n    $alt-value: start;\n  } @else if $value == \"flex-end\" {\n    $alt-value: end;\n  }\n\n  // 2009\n  @include prefixer(box-align, $alt-value, webkit moz spec);\n\n  // 2012\n  @include prefixer(align-items, $value, webkit moz ms o spec);\n\n  // 2011 (IE 10)\n  -ms-flex-align: $alt-value;\n}\n\n// 2011 - flex-item-align (auto | start | end | center | baseline | stretch)\n// 2012 - align-self (auto | flex-start | flex-end | center | baseline | stretch)\n@mixin align-self($value: auto) {\n\n  $value-2011: $value;\n  @if $value == \"flex-start\" {\n    $value-2011: start;\n  } @else if $value == \"flex-end\" {\n    $value-2011: end;\n  }\n\n  // 2012\n  @include prefixer(align-self, $value, webkit moz spec);\n\n  // 2011 (IE 10)\n  -ms-flex-item-align: $value-2011;\n}\n\n// 2011 - flex-line-pack (start | end | center | justify | distribute | stretch)\n// 2012 - align-content (flex-start | flex-end | center | space-between | space-around | stretch)\n@mixin align-content($value: stretch) {\n\n  $value-2011: $value;\n  @if $value == \"flex-start\" {\n    $value-2011: start;\n  } @else if $value == \"flex-end\" {\n    $value-2011: end;\n  } @else if $value == \"space-between\" {\n    $value-2011: justify;\n  } @else if $value == \"space-around\" {\n    $value-2011: distribute;\n  }\n\n  // 2012\n  @include prefixer(align-content, $value, webkit moz spec);\n\n  // 2011 (IE 10)\n  -ms-flex-line-pack: $value-2011;\n}\n","@mixin font-face(\n  $font-family,\n  $file-path,\n  $weight: normal,\n  $style: normal,\n  $asset-pipeline: $asset-pipeline,\n  $file-formats: eot woff2 woff ttf svg) {\n\n  $font-url-prefix: font-url-prefixer($asset-pipeline);\n\n  @font-face {\n    font-family: $font-family;\n    font-style: $style;\n    font-weight: $weight;\n\n    src: font-source-declaration(\n      $font-family,\n      $file-path,\n      $asset-pipeline,\n      $file-formats,\n      $font-url-prefix\n    );\n  }\n}\n","@mixin font-feature-settings($settings...) {\n  @if length($settings) == 0 { $settings: none; }\n  @include prefixer(font-feature-settings, $settings, webkit moz ms spec);\n}\n","// HiDPI mixin. Default value set to 1.3 to target Google Nexus 7 (http://bjango.com/articles/min-device-pixel-ratio/)\n@mixin hidpi($ratio: 1.3) {\n  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),\n  only screen and (min--moz-device-pixel-ratio: $ratio),\n  only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),\n  only screen and (min-resolution: round($ratio * 96dpi)),\n  only screen and (min-resolution: $ratio * 1dppx) {\n    @content;\n  }\n}\n","@mixin hyphens($hyphenation: none) {\n  // none | manual | auto\n  @include prefixer(hyphens, $hyphenation, webkit moz ms spec);\n}\n","@mixin image-rendering ($mode:auto) {\n\n  @if ($mode == crisp-edges) {\n    -ms-interpolation-mode: nearest-neighbor; // IE8+\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -o-crisp-edges;\n    image-rendering: -webkit-optimize-contrast;\n    image-rendering: crisp-edges;\n  }\n\n  @else {\n    image-rendering: $mode;\n  }\n}\n","// Adds keyframes blocks for supported prefixes, removing redundant prefixes in the block's content\n@mixin keyframes($name) {\n  $original-prefix-for-webkit:    $prefix-for-webkit;\n  $original-prefix-for-mozilla:   $prefix-for-mozilla;\n  $original-prefix-for-microsoft: $prefix-for-microsoft;\n  $original-prefix-for-opera:     $prefix-for-opera;\n  $original-prefix-for-spec:      $prefix-for-spec;\n\n  @if $original-prefix-for-webkit {\n    @include disable-prefix-for-all();\n    $prefix-for-webkit: true !global;\n    @-webkit-keyframes #{$name} {\n      @content;\n    }\n  }\n\n  @if $original-prefix-for-mozilla {\n    @include disable-prefix-for-all();\n    $prefix-for-mozilla: true !global;\n    @-moz-keyframes #{$name} {\n      @content;\n    }\n  }\n\n  $prefix-for-webkit:    $original-prefix-for-webkit    !global;\n  $prefix-for-mozilla:   $original-prefix-for-mozilla   !global;\n  $prefix-for-microsoft: $original-prefix-for-microsoft !global;\n  $prefix-for-opera:     $original-prefix-for-opera     !global;\n  $prefix-for-spec:      $original-prefix-for-spec      !global;\n\n  @if $original-prefix-for-spec {\n    @keyframes #{$name} {\n      @content;\n    }\n  }\n}\n","@mixin linear-gradient($pos, $g1, $g2: null,\n                       $g3: null, $g4: null,\n                       $g5: null, $g6: null,\n                       $g7: null, $g8: null,\n                       $g9: null, $g10: null,\n                       $fallback: null) {\n  // Detect what type of value exists in $pos\n  $pos-type: type-of(nth($pos, 1));\n  $pos-spec: null;\n  $pos-degree: null;\n\n  // If $pos is missing from mixin, reassign vars and add default position\n  @if ($pos-type == color) or (nth($pos, 1) == \"transparent\")  {\n    $g10: $g9; $g9: $g8; $g8: $g7; $g7: $g6; $g6: $g5;\n    $g5: $g4; $g4: $g3; $g3: $g2; $g2: $g1; $g1: $pos;\n    $pos: null;\n  }\n\n  @if $pos {\n    $positions: _linear-positions-parser($pos);\n    $pos-degree: nth($positions, 1);\n    $pos-spec:   nth($positions, 2);\n  }\n\n  $full: $g1, $g2, $g3, $g4, $g5, $g6, $g7, $g8, $g9, $g10;\n\n  // Set $g1 as the default fallback color\n  $fallback-color: nth($g1, 1);\n\n  // If $fallback is a color use that color as the fallback color\n  @if (type-of($fallback) == color) or ($fallback == \"transparent\") {\n    $fallback-color: $fallback;\n  }\n\n  background-color: $fallback-color;\n  background-image: -webkit-linear-gradient($pos-degree $full); // Safari 5.1+, Chrome\n  background-image: unquote(\"linear-gradient(#{$pos-spec}#{$full})\");\n}\n","@mixin perspective($depth: none) {\n  // none | <length>\n  @include prefixer(perspective, $depth, webkit moz spec);\n}\n\n@mixin perspective-origin($value: 50% 50%) {\n  @include prefixer(perspective-origin, $value, webkit moz spec);\n}\n","@mixin placeholder {\n  $placeholders: \":-webkit-input\" \":-moz\" \"-moz\" \"-ms-input\";\n  @each $placeholder in $placeholders {\n    &:#{$placeholder}-placeholder {\n      @content;\n    }\n  }\n}\n","// Requires Sass 3.1+\n@mixin radial-gradient($g1, $g2,\n                       $g3: null, $g4: null,\n                       $g5: null, $g6: null,\n                       $g7: null, $g8: null,\n                       $g9: null, $g10: null,\n                       $pos: null,\n                       $shape-size: null,\n                       $fallback: null) {\n\n  $data: _radial-arg-parser($g1, $g2, $pos, $shape-size);\n  $g1:  nth($data, 1);\n  $g2:  nth($data, 2);\n  $pos: nth($data, 3);\n  $shape-size: nth($data, 4);\n\n  $full: $g1, $g2, $g3, $g4, $g5, $g6, $g7, $g8, $g9, $g10;\n\n  // Strip deprecated cover/contain for spec\n  $shape-size-spec: _shape-size-stripper($shape-size);\n\n  // Set $g1 as the default fallback color\n  $first-color: nth($full, 1);\n  $fallback-color: nth($first-color, 1);\n\n  @if (type-of($fallback) == color) or ($fallback == \"transparent\") {\n    $fallback-color: $fallback;\n  }\n\n  // Add Commas and spaces\n  $shape-size: if($shape-size, \"#{$shape-size}, \", null);\n  $pos:        if($pos, \"#{$pos}, \", null);\n  $pos-spec:   if($pos, \"at #{$pos}\", null);\n  $shape-size-spec: if(($shape-size-spec != \" \") and ($pos == null), \"#{$shape-size-spec}, \", \"#{$shape-size-spec} \");\n\n  background-color:  $fallback-color;\n  background-image: -webkit-radial-gradient(#{$pos}#{$shape-size}#{$full});\n  background-image: radial-gradient(#{$shape-size-spec}#{$pos-spec}#{$full});\n}\n","@charset \"UTF-8\";\r\n\r\n/// Outputs the spec and prefixed versions of the `::selection` pseudo-element.\r\n///\r\n/// @param {Bool} $current-selector [false]\r\n///   If set to `true`, it takes the current element into consideration.\r\n///\r\n/// @example scss - Usage\r\n///   .element {\r\n///     @include selection(true) {\r\n///       background-color: #ffbb52;\r\n///     }\r\n///   }\r\n///\r\n/// @example css - CSS Output\r\n///   .element::-moz-selection {\r\n///     background-color: #ffbb52;\r\n///   }\r\n///\r\n///   .element::selection {\r\n///     background-color: #ffbb52;\r\n///   }\r\n\r\n@mixin selection($current-selector: false) {\r\n  @if $current-selector {\r\n    &::-moz-selection {\r\n      @content;\r\n    }\r\n\r\n    &::selection {\r\n      @content;\r\n    }\r\n  } @else {\r\n    ::-moz-selection {\r\n      @content;\r\n    }\r\n\r\n    ::selection {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n","@mixin text-decoration($value) {\n// <text-decoration-line> || <text-decoration-style> || <text-decoration-color>\n  @include prefixer(text-decoration, $value, moz);\n}\n\n@mixin text-decoration-line($line: none) {\n// none || underline || overline || line-through\n  @include prefixer(text-decoration-line, $line, moz);\n}\n\n@mixin text-decoration-style($style: solid) {\n// solid || double || dotted || dashed || wavy\n  @include prefixer(text-decoration-style, $style, moz webkit);\n}\n\n@mixin text-decoration-color($color: currentColor) {\n// currentColor || <color>\n  @include prefixer(text-decoration-color, $color, moz);\n}\n","@mixin transform($property: none) {\n  // none | <transform-function>\n  @include prefixer(transform, $property, webkit moz ms o spec);\n}\n\n@mixin transform-origin($axes: 50%) {\n  // x-axis - left | center | right  | length | %\n  // y-axis - top  | center | bottom | length | %\n  // z-axis -                          length\n  @include prefixer(transform-origin, $axes, webkit moz ms o spec);\n}\n\n@mixin transform-style($style: flat) {\n  @include prefixer(transform-style, $style, webkit moz ms o spec);\n}\n","// Shorthand mixin. Supports multiple parentheses-deliminated values for each variable.\n// Example: @include transition (all 2s ease-in-out);\n//          @include transition (opacity 1s ease-in 2s, width 2s ease-out);\n//          @include transition-property (transform, opacity);\n\n@mixin transition($properties...) {\n  // Fix for vendor-prefix transform property\n  $needs-prefixes: false;\n  $webkit: ();\n  $moz: ();\n  $spec: ();\n\n  // Create lists for vendor-prefixed transform\n  @each $list in $properties {\n    @if nth($list, 1) == \"transform\" {\n      $needs-prefixes: true;\n      $list1: -webkit-transform;\n      $list2: -moz-transform;\n      $list3: ();\n\n      @each $var in $list {\n        $list3: join($list3, $var);\n\n        @if $var != \"transform\" {\n          $list1: join($list1, $var);\n          $list2: join($list2, $var);\n        }\n      }\n\n      $webkit: append($webkit, $list1);\n      $moz:    append($moz,    $list2);\n      $spec:   append($spec,   $list3);\n    } @else {\n      $webkit: append($webkit, $list, comma);\n      $moz:    append($moz,    $list, comma);\n      $spec:   append($spec,   $list, comma);\n    }\n  }\n\n  @if $needs-prefixes {\n    -webkit-transition: $webkit;\n       -moz-transition: $moz;\n            transition: $spec;\n  } @else {\n    @if length($properties) >= 1 {\n      @include prefixer(transition, $properties, webkit moz spec);\n    } @else {\n      $properties: all 0.15s ease-out 0s;\n      @include prefixer(transition, $properties, webkit moz spec);\n    }\n  }\n}\n\n@mixin transition-property($properties...) {\n  -webkit-transition-property: transition-property-names($properties, \"webkit\");\n     -moz-transition-property: transition-property-names($properties, \"moz\");\n          transition-property: transition-property-names($properties, false);\n}\n\n@mixin transition-duration($times...) {\n  @include prefixer(transition-duration, $times, webkit moz spec);\n}\n\n@mixin transition-timing-function($motions...) {\n  // ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier()\n  @include prefixer(transition-timing-function, $motions, webkit moz spec);\n}\n\n@mixin transition-delay($times...) {\n  @include prefixer(transition-delay, $times, webkit moz spec);\n}\n","@mixin user-select($value: none) {\n  @include prefixer(user-select, $value, webkit moz ms spec);\n}\n","@charset \"UTF-8\";\n\n/// Provides a quick method for targeting `border-color` on specific sides of a box. Use a `null` value to “skip” a side.\n///\n/// @param {Arglist} $vals\n///   List of arguments\n///\n/// @example scss - Usage\n///   .element {\n///     @include border-color(#a60b55 #76cd9c null #e8ae1a);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     border-left-color: #e8ae1a;\n///     border-right-color: #76cd9c;\n///     border-top-color: #a60b55;\n///   }\n///\n/// @require {mixin} directional-property\n///\n/// @output `border-color`\n\n@mixin border-color($vals...) {\n  @include directional-property(border, color, $vals...);\n}\n","@charset \"UTF-8\";\n\n/// Provides a quick method for targeting `border-radius` on both corners on the side of a box.\n///\n/// @param {Number} $radii\n///   List of arguments\n///\n/// @example scss - Usage\n///   .element-one {\n///     @include border-top-radius(5px);\n///   }\n///\n///   .element-two {\n///     @include border-left-radius(3px);\n///   }\n///\n/// @example css - CSS Output\n///   .element-one {\n///     border-top-left-radius: 5px;\n///     border-top-right-radius: 5px;\n///   }\n///\n///   .element-two {\n///     border-bottom-left-radius: 3px;\n///     border-top-left-radius: 3px;\n///   }\n///\n/// @output `border-radius`\n\n@mixin border-top-radius($radii) {\n  border-top-left-radius: $radii;\n  border-top-right-radius: $radii;\n}\n\n@mixin border-right-radius($radii) {\n  border-bottom-right-radius: $radii;\n  border-top-right-radius: $radii;\n}\n\n@mixin border-bottom-radius($radii) {\n  border-bottom-left-radius: $radii;\n  border-bottom-right-radius: $radii;\n}\n\n@mixin border-left-radius($radii) {\n  border-bottom-left-radius: $radii;\n  border-top-left-radius: $radii;\n}\n","@charset \"UTF-8\";\n\n/// Provides a quick method for targeting `border-style` on specific sides of a box. Use a `null` value to “skip” a side.\n///\n/// @param {Arglist} $vals\n///   List of arguments\n///\n/// @example scss - Usage\n///   .element {\n///     @include border-style(dashed null solid);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     border-bottom-style: solid;\n///     border-top-style: dashed;\n///   }\n///\n/// @require {mixin} directional-property\n///\n/// @output `border-style`\n\n@mixin border-style($vals...) {\n  @include directional-property(border, style, $vals...);\n}\n","@charset \"UTF-8\";\n\n/// Provides a quick method for targeting `border-width` on specific sides of a box. Use a `null` value to “skip” a side.\n///\n/// @param {Arglist} $vals\n///   List of arguments\n///\n/// @example scss - Usage\n///   .element {\n///     @include border-width(1em null 20px);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     border-bottom-width: 20px;\n///     border-top-width: 1em;\n///   }\n///\n/// @require {mixin} directional-property\n///\n/// @output `border-width`\n\n@mixin border-width($vals...) {\n  @include directional-property(border, width, $vals...);\n}\n","@charset \"UTF-8\";\n\n/// Generates variables for all buttons. Please note that you must use interpolation on the variable: `#{$all-buttons}`.\n///\n/// @example scss - Usage\n///   #{$all-buttons} {\n///     background-color: #f00;\n///   }\n///\n///   #{$all-buttons-focus},\n///   #{$all-buttons-hover} {\n///     background-color: #0f0;\n///   }\n///\n///   #{$all-buttons-active} {\n///     background-color: #00f;\n///   }\n///\n/// @example css - CSS Output\n///   button,\n///   input[type=\"button\"],\n///   input[type=\"reset\"],\n///   input[type=\"submit\"] {\n///     background-color: #f00;\n///   }\n///\n///   button:focus,\n///   input[type=\"button\"]:focus,\n///   input[type=\"reset\"]:focus,\n///   input[type=\"submit\"]:focus,\n///   button:hover,\n///   input[type=\"button\"]:hover,\n///   input[type=\"reset\"]:hover,\n///   input[type=\"submit\"]:hover {\n///     background-color: #0f0;\n///   }\n///\n///   button:active,\n///   input[type=\"button\"]:active,\n///   input[type=\"reset\"]:active,\n///   input[type=\"submit\"]:active {\n///     background-color: #00f;\n///   }\n///\n/// @require assign-inputs\n///\n/// @type List\n///\n/// @todo Remove double assigned variables (Lines 59–62) in v5.0.0\n\n$buttons-list: 'button',\n               'input[type=\"button\"]',\n               'input[type=\"reset\"]',\n               'input[type=\"submit\"]';\n\n$all-buttons:        assign-inputs($buttons-list);\n$all-buttons-active: assign-inputs($buttons-list, active);\n$all-buttons-focus:  assign-inputs($buttons-list, focus);\n$all-buttons-hover:  assign-inputs($buttons-list, hover);\n\n$all-button-inputs:        $all-buttons;\n$all-button-inputs-active: $all-buttons-active;\n$all-button-inputs-focus:  $all-buttons-focus;\n$all-button-inputs-hover:  $all-buttons-hover;\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Truncates text and adds an ellipsis to represent overflow.\n///\n/// @param {Number} $width [100%]\n///   Max-width for the string to respect before being truncated\n///\n/// @example scss - Usage\n///   .element {\n///     @include ellipsis;\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: inline-block;\n///     max-width: 100%;\n///     overflow: hidden;\n///     text-overflow: ellipsis;\n///     white-space: nowrap;\n///     word-wrap: normal;\n///   }\n\n@mixin ellipsis($width: 100%) {\n  display: inline-block;\n  max-width: $width;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n}\n","@charset \"UTF-8\";\n\n/// Georgia font stack.\n///\n/// @type List\n\n$georgia: \"Georgia\", \"Cambria\", \"Times New Roman\", \"Times\", serif;\n\n/// Helvetica font stack.\n///\n/// @type List\n\n$helvetica: \"Helvetica Neue\", \"Helvetica\", \"Roboto\", \"Arial\", sans-serif;\n\n/// Lucida Grande font stack.\n///\n/// @type List\n\n$lucida-grande: \"Lucida Grande\", \"Tahoma\", \"Verdana\", \"Arial\", sans-serif;\n\n/// Monospace font stack.\n///\n/// @type List\n\n$monospace: \"Bitstream Vera Sans Mono\", \"Consolas\", \"Courier\", monospace;\n\n/// Verdana font stack.\n///\n/// @type List\n\n$verdana: \"Verdana\", \"Geneva\", sans-serif;\n","/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.\n///\n/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement\n///\n/// @example scss - Usage\n///   .element {\n///     @include hide-text;\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     overflow: hidden;\n///     text-indent: 101%;\n///     white-space: nowrap;\n///   }\n///\n/// @todo Remove height argument in v5.0.0\n\n@mixin hide-text($height: null) {\n  overflow: hidden;\n  text-indent: 101%;\n  white-space: nowrap;\n\n  @if $height {\n    @warn \"The `hide-text` mixin has changed and no longer requires a height. The height argument will no longer be accepted in v5.0.0\";\n  }\n}\n","@charset \"UTF-8\";\n\n/// Provides a quick method for targeting `margin` on specific sides of a box. Use a `null` value to “skip” a side.\n///\n/// @param {Arglist} $vals\n///   List of arguments\n///\n/// @example scss - Usage\n///   .element {\n///     @include margin(null 10px 3em 20vh);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     margin-bottom: 3em;\n///     margin-left: 20vh;\n///     margin-right: 10px;\n///   }\n///\n/// @require {mixin} directional-property\n///\n/// @output `margin`\n\n@mixin margin($vals...) {\n  @include directional-property(margin, false, $vals...);\n}\n","@charset \"UTF-8\";\n\n/// Provides a quick method for targeting `padding` on specific sides of a box. Use a `null` value to “skip” a side.\n///\n/// @param {Arglist} $vals\n///   List of arguments\n///\n/// @example scss - Usage\n///   .element {\n///     @include padding(12vh null 10px 5%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     padding-bottom: 10px;\n///     padding-left: 5%;\n///     padding-top: 12vh;\n///   }\n///\n/// @require {mixin} directional-property\n///\n/// @output `padding`\n\n@mixin padding($vals...) {\n  @include directional-property(padding, false, $vals...);\n}\n","@charset \"UTF-8\";\n\n/// Provides a quick method for setting an element’s position. Use a `null` value to “skip” a side.\n///\n/// @param {Position} $position [relative]\n///   A CSS position value\n///\n/// @param {Arglist} $coordinates [null null null null]\n///   List of values that correspond to the 4-value syntax for the edges of a box\n///\n/// @example scss - Usage\n///   .element {\n///     @include position(absolute, 0 null null 10em);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     left: 10em;\n///     position: absolute;\n///     top: 0;\n///   }\n///\n/// @require {function} is-length\n/// @require {function} unpack\n\n@mixin position($position: relative, $coordinates: null null null null) {\n  @if type-of($position) == list {\n    $coordinates: $position;\n    $position: relative;\n  }\n\n  $coordinates: unpack($coordinates);\n\n  $offsets: (\n    top:    nth($coordinates, 1),\n    right:  nth($coordinates, 2),\n    bottom: nth($coordinates, 3),\n    left:   nth($coordinates, 4)\n  );\n\n  position: $position;\n\n  @each $offset, $value in $offsets {\n    @if is-length($value) {\n      #{$offset}: $value;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n/// A mixin for generating vendor prefixes on non-standardized properties.\n///\n/// @param {String} $property\n///   Property to prefix\n///\n/// @param {*} $value\n///   Value to use\n///\n/// @param {List} $prefixes\n///   Prefixes to define\n///\n/// @example scss - Usage\n///   .element {\n///     @include prefixer(border-radius, 10px, webkit ms spec);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     -webkit-border-radius: 10px;\n///     -moz-border-radius: 10px;\n///     border-radius: 10px;\n///   }\n///\n/// @require {variable} $prefix-for-webkit\n/// @require {variable} $prefix-for-mozilla\n/// @require {variable} $prefix-for-microsoft\n/// @require {variable} $prefix-for-opera\n/// @require {variable} $prefix-for-spec\n\n@mixin prefixer($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n}\n\n@mixin disable-prefix-for-all() {\n  $prefix-for-webkit:    false !global;\n  $prefix-for-mozilla:   false !global;\n  $prefix-for-microsoft: false !global;\n  $prefix-for-opera:     false !global;\n  $prefix-for-spec:      false !global;\n}\n","@mixin retina-image($filename, $background-size, $extension: png, $retina-filename: null, $retina-suffix: _2x, $asset-pipeline: $asset-pipeline) {\n  @if $asset-pipeline {\n    background-image: image-url(\"#{$filename}.#{$extension}\");\n  } @else {\n    background-image:       url(\"#{$filename}.#{$extension}\");\n  }\n\n  @include hidpi {\n    @if $asset-pipeline {\n      @if $retina-filename {\n        background-image: image-url(\"#{$retina-filename}.#{$extension}\");\n      } @else {\n        background-image: image-url(\"#{$filename}#{$retina-suffix}.#{$extension}\");\n      }\n    } @else {\n      @if $retina-filename {\n        background-image: url(\"#{$retina-filename}.#{$extension}\");\n      } @else {\n        background-image: url(\"#{$filename}#{$retina-suffix}.#{$extension}\");\n      }\n    }\n\n    background-size: $background-size;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Sets the `width` and `height` of the element.\n///\n/// @param {List} $size\n///   A list of at most 2 size values.\n///\n///   If there is only a single value in `$size` it is used for both width and height. All units are supported.\n///\n/// @example scss - Usage\n///   .first-element {\n///     @include size(2em);\n///   }\n///\n///   .second-element {\n///     @include size(auto 10em);\n///   }\n///\n/// @example css - CSS Output\n///   .first-element {\n///     width: 2em;\n///     height: 2em;\n///   }\n///\n///   .second-element {\n///     width: auto;\n///     height: 10em;\n///   }\n///\n/// @todo Refactor in 5.0.0 to use a comma-separated argument\n\n@mixin size($value) {\n  $width: nth($value, 1);\n  $height: $width;\n\n  @if length($value) > 1 {\n    $height: nth($value, 2);\n  }\n\n  @if is-size($height) {\n    height: $height;\n  } @else {\n    @warn \"`#{$height}` is not a valid length for the `$height` parameter in the `size` mixin.\";\n  }\n\n  @if is-size($width) {\n    width: $width;\n  } @else {\n    @warn \"`#{$width}` is not a valid length for the `$width` parameter in the `size` mixin.\";\n  }\n}\n","@charset \"UTF-8\";\n\n/// Generates variables for all text-based inputs. Please note that you must use interpolation on the variable: `#{$all-text-inputs}`.\n///\n/// @example scss - Usage\n///   #{$all-text-inputs} {\n///     border: 1px solid #f00;\n///   }\n///\n///   #{$all-text-inputs-focus},\n///   #{$all-text-inputs-hover} {\n///     border: 1px solid #0f0;\n///   }\n///\n///   #{$all-text-inputs-active} {\n///     border: 1px solid #00f;\n///   }\n///\n/// @example css - CSS Output\n///   input[type=\"color\"],\n///   input[type=\"date\"],\n///   input[type=\"datetime\"],\n///   input[type=\"datetime-local\"],\n///   input[type=\"email\"],\n///   input[type=\"month\"],\n///   input[type=\"number\"],\n///   input[type=\"password\"],\n///   input[type=\"search\"],\n///   input[type=\"tel\"],\n///   input[type=\"text\"],\n///   input[type=\"time\"],\n///   input[type=\"url\"],\n///   input[type=\"week\"],\n///   textarea {\n///     border: 1px solid #f00;\n///   }\n///\n///   input[type=\"color\"]:focus,\n///   input[type=\"date\"]:focus,\n///   input[type=\"datetime\"]:focus,\n///   input[type=\"datetime-local\"]:focus,\n///   input[type=\"email\"]:focus,\n///   input[type=\"month\"]:focus,\n///   input[type=\"number\"]:focus,\n///   input[type=\"password\"]:focus,\n///   input[type=\"search\"]:focus,\n///   input[type=\"tel\"]:focus,\n///   input[type=\"text\"]:focus,\n///   input[type=\"time\"]:focus,\n///   input[type=\"url\"]:focus,\n///   input[type=\"week\"]:focus,\n///   textarea:focus,\n///   input[type=\"color\"]:hover,\n///   input[type=\"date\"]:hover,\n///   input[type=\"datetime\"]:hover,\n///   input[type=\"datetime-local\"]:hover,\n///   input[type=\"email\"]:hover,\n///   input[type=\"month\"]:hover,\n///   input[type=\"number\"]:hover,\n///   input[type=\"password\"]:hover,\n///   input[type=\"search\"]:hover,\n///   input[type=\"tel\"]:hover,\n///   input[type=\"text\"]:hover,\n///   input[type=\"time\"]:hover,\n///   input[type=\"url\"]:hover,\n///   input[type=\"week\"]:hover,\n///   textarea:hover {\n///     border: 1px solid #0f0;\n///   }\n///\n///   input[type=\"color\"]:active,\n///   input[type=\"date\"]:active,\n///   input[type=\"datetime\"]:active,\n///   input[type=\"datetime-local\"]:active,\n///   input[type=\"email\"]:active,\n///   input[type=\"month\"]:active,\n///   input[type=\"number\"]:active,\n///   input[type=\"password\"]:active,\n///   input[type=\"search\"]:active,\n///   input[type=\"tel\"]:active,\n///   input[type=\"text\"]:active,\n///   input[type=\"time\"]:active,\n///   input[type=\"url\"]:active,\n///   input[type=\"week\"]:active,\n///   textarea:active {\n///     border: 1px solid #00f;\n///   }\n///\n/// @require assign-inputs\n///\n/// @type List\n\n$text-inputs-list: 'input[type=\"color\"]',\n                   'input[type=\"date\"]',\n                   'input[type=\"datetime\"]',\n                   'input[type=\"datetime-local\"]',\n                   'input[type=\"email\"]',\n                   'input[type=\"month\"]',\n                   'input[type=\"number\"]',\n                   'input[type=\"password\"]',\n                   'input[type=\"search\"]',\n                   'input[type=\"tel\"]',\n                   'input[type=\"text\"]',\n                   'input[type=\"time\"]',\n                   'input[type=\"url\"]',\n                   'input[type=\"week\"]',\n                   'input:not([type])',\n                   'textarea';\n\n$all-text-inputs:        assign-inputs($text-inputs-list);\n$all-text-inputs-active: assign-inputs($text-inputs-list, active);\n$all-text-inputs-focus:  assign-inputs($text-inputs-list, focus);\n$all-text-inputs-hover:  assign-inputs($text-inputs-list, hover);\n","@charset \"UTF-8\";\n\n/// CSS cubic-bezier timing functions. Timing functions courtesy of jquery.easie (github.com/jaukia/easie)\n///\n/// Timing functions are the same as demoed here: http://jqueryui.com/resources/demos/effect/easing.html\n///\n/// @type cubic-bezier\n\n$ease-in-quad:      cubic-bezier(0.550,  0.085, 0.680, 0.530);\n$ease-in-cubic:     cubic-bezier(0.550,  0.055, 0.675, 0.190);\n$ease-in-quart:     cubic-bezier(0.895,  0.030, 0.685, 0.220);\n$ease-in-quint:     cubic-bezier(0.755,  0.050, 0.855, 0.060);\n$ease-in-sine:      cubic-bezier(0.470,  0.000, 0.745, 0.715);\n$ease-in-expo:      cubic-bezier(0.950,  0.050, 0.795, 0.035);\n$ease-in-circ:      cubic-bezier(0.600,  0.040, 0.980, 0.335);\n$ease-in-back:      cubic-bezier(0.600, -0.280, 0.735, 0.045);\n\n$ease-out-quad:     cubic-bezier(0.250,  0.460, 0.450, 0.940);\n$ease-out-cubic:    cubic-bezier(0.215,  0.610, 0.355, 1.000);\n$ease-out-quart:    cubic-bezier(0.165,  0.840, 0.440, 1.000);\n$ease-out-quint:    cubic-bezier(0.230,  1.000, 0.320, 1.000);\n$ease-out-sine:     cubic-bezier(0.390,  0.575, 0.565, 1.000);\n$ease-out-expo:     cubic-bezier(0.190,  1.000, 0.220, 1.000);\n$ease-out-circ:     cubic-bezier(0.075,  0.820, 0.165, 1.000);\n$ease-out-back:     cubic-bezier(0.175,  0.885, 0.320, 1.275);\n\n$ease-in-out-quad:  cubic-bezier(0.455,  0.030, 0.515, 0.955);\n$ease-in-out-cubic: cubic-bezier(0.645,  0.045, 0.355, 1.000);\n$ease-in-out-quart: cubic-bezier(0.770,  0.000, 0.175, 1.000);\n$ease-in-out-quint: cubic-bezier(0.860,  0.000, 0.070, 1.000);\n$ease-in-out-sine:  cubic-bezier(0.445,  0.050, 0.550, 0.950);\n$ease-in-out-expo:  cubic-bezier(1.000,  0.000, 0.000, 1.000);\n$ease-in-out-circ:  cubic-bezier(0.785,  0.135, 0.150, 0.860);\n$ease-in-out-back:  cubic-bezier(0.680, -0.550, 0.265, 1.550);\n","@mixin triangle($size, $color, $direction) {\n  $width: nth($size, 1);\n  $height: nth($size, length($size));\n  $foreground-color: nth($color, 1);\n  $background-color: if(length($color) == 2, nth($color, 2), transparent);\n  height: 0;\n  width: 0;\n\n  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {\n    $width: $width / 2;\n    $height: if(length($size) > 1, $height, $height/2);\n\n    @if $direction == up {\n      border-bottom: $height solid $foreground-color;\n      border-left: $width solid $background-color;\n      border-right: $width solid $background-color;\n    } @else if $direction == right {\n      border-bottom: $width solid $background-color;\n      border-left: $height solid $foreground-color;\n      border-top: $width solid $background-color;\n    } @else if $direction == down {\n      border-left: $width solid $background-color;\n      border-right: $width solid $background-color;\n      border-top: $height solid $foreground-color;\n    } @else if $direction == left {\n      border-bottom: $width solid $background-color;\n      border-right: $height solid $foreground-color;\n      border-top: $width solid $background-color;\n    }\n  } @else if ($direction == up-right) or ($direction == up-left) {\n    border-top: $height solid $foreground-color;\n\n    @if $direction == up-right {\n      border-left:  $width solid $background-color;\n    } @else if $direction == up-left {\n      border-right: $width solid $background-color;\n    }\n  } @else if ($direction == down-right) or ($direction == down-left) {\n    border-bottom: $height solid $foreground-color;\n\n    @if $direction == down-right {\n      border-left:  $width solid $background-color;\n    } @else if $direction == down-left {\n      border-right: $width solid $background-color;\n    }\n  } @else if ($direction == inset-up) {\n    border-color: $background-color $background-color $foreground-color;\n    border-style: solid;\n    border-width: $height $width;\n  } @else if ($direction == inset-down) {\n    border-color: $foreground-color $background-color $background-color;\n    border-style: solid;\n    border-width: $height $width;\n  } @else if ($direction == inset-right) {\n    border-color: $background-color $background-color $background-color $foreground-color;\n    border-style: solid;\n    border-width: $width $height;\n  } @else if ($direction == inset-left) {\n    border-color: $background-color $foreground-color $background-color $background-color;\n    border-style: solid;\n    border-width: $width $height;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Provides an easy way to change the `word-wrap` property.\n///\n/// @param {String} $wrap [break-word]\n///   Value for the `word-break` property.\n///\n/// @example scss - Usage\n///   .wrapper {\n///     @include word-wrap(break-word);\n///   }\n///\n/// @example css - CSS Output\n///   .wrapper {\n///     overflow-wrap: break-word;\n///     word-break: break-all;\n///     word-wrap: break-word;\n///   }\n\n@mixin word-wrap($wrap: break-word) {\n  overflow-wrap: $wrap;\n  word-wrap: $wrap;\n\n  @if $wrap == break-word {\n    word-break: break-all;\n  } @else {\n    word-break: $wrap;\n  }\n}\n","// The following features have been deprecated and will be removed in the next MAJOR version release\n\n@mixin inline-block {\n  display: inline-block;\n\n  @warn \"The inline-block mixin is deprecated and will be removed in the next major version release\";\n}\n\n@mixin button ($style: simple, $base-color: #4294f0, $text-size: inherit, $padding: 7px 18px) {\n\n  @if type-of($style) == string and type-of($base-color) == color {\n    @include buttonstyle($style, $base-color, $text-size, $padding);\n  }\n\n  @if type-of($style) == string and type-of($base-color) == number {\n    $padding: $text-size;\n    $text-size: $base-color;\n    $base-color: #4294f0;\n\n    @if $padding == inherit {\n      $padding: 7px 18px;\n    }\n\n    @include buttonstyle($style, $base-color, $text-size, $padding);\n  }\n\n  @if type-of($style) == color and type-of($base-color) == color {\n    $base-color: $style;\n    $style: simple;\n    @include buttonstyle($style, $base-color, $text-size, $padding);\n  }\n\n  @if type-of($style) == color and type-of($base-color) == number {\n    $padding: $text-size;\n    $text-size: $base-color;\n    $base-color: $style;\n    $style: simple;\n\n    @if $padding == inherit {\n      $padding: 7px 18px;\n    }\n\n    @include buttonstyle($style, $base-color, $text-size, $padding);\n  }\n\n  @if type-of($style) == number {\n    $padding: $base-color;\n    $text-size: $style;\n    $base-color: #4294f0;\n    $style: simple;\n\n    @if $padding == #4294f0 {\n      $padding: 7px 18px;\n    }\n\n    @include buttonstyle($style, $base-color, $text-size, $padding);\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.5;\n  }\n\n  @warn \"The button mixin is deprecated and will be removed in the next major version release\";\n}\n\n// Selector Style Button\n@mixin buttonstyle($type, $b-color, $t-size, $pad) {\n  // Grayscale button\n  @if $type == simple and $b-color == grayscale($b-color) {\n    @include simple($b-color, true, $t-size, $pad);\n  }\n\n  @if $type == shiny and $b-color == grayscale($b-color) {\n    @include shiny($b-color, true, $t-size, $pad);\n  }\n\n  @if $type == pill and $b-color == grayscale($b-color) {\n    @include pill($b-color, true, $t-size, $pad);\n  }\n\n  @if $type == flat and $b-color == grayscale($b-color) {\n    @include flat($b-color, true, $t-size, $pad);\n  }\n\n  // Colored button\n  @if $type == simple {\n    @include simple($b-color, false, $t-size, $pad);\n  }\n\n  @else if $type == shiny {\n    @include shiny($b-color, false, $t-size, $pad);\n  }\n\n  @else if $type == pill {\n    @include pill($b-color, false, $t-size, $pad);\n  }\n\n  @else if $type == flat {\n    @include flat($b-color, false, $t-size, $pad);\n  }\n}\n\n// Simple Button\n@mixin simple($base-color, $grayscale: false, $textsize: inherit, $padding: 7px 18px) {\n  $color:         hsl(0, 0, 100%);\n  $border:        adjust-color($base-color, $saturation:  9%,  $lightness: -14%);\n  $inset-shadow:  adjust-color($base-color, $saturation: -8%,  $lightness:  15%);\n  $stop-gradient: adjust-color($base-color, $saturation:  9%,  $lightness: -11%);\n  $text-shadow:   adjust-color($base-color, $saturation:  15%, $lightness: -18%);\n\n  @if is-light($base-color) {\n    $color:       hsl(0, 0, 20%);\n    $text-shadow: adjust-color($base-color, $saturation: 10%, $lightness: 4%);\n  }\n\n  @if $grayscale == true {\n    $border:        grayscale($border);\n    $inset-shadow:  grayscale($inset-shadow);\n    $stop-gradient: grayscale($stop-gradient);\n    $text-shadow:   grayscale($text-shadow);\n  }\n\n  border: 1px solid $border;\n  border-radius: 3px;\n  box-shadow: inset 0 1px 0 0 $inset-shadow;\n  color: $color;\n  display: inline-block;\n  font-size: $textsize;\n  font-weight: bold;\n  @include linear-gradient ($base-color, $stop-gradient);\n  padding: $padding;\n  text-decoration: none;\n  text-shadow: 0 1px 0 $text-shadow;\n  background-clip: padding-box;\n\n  &:hover:not(:disabled) {\n    $base-color-hover:    adjust-color($base-color, $saturation: -4%, $lightness: -5%);\n    $inset-shadow-hover:  adjust-color($base-color, $saturation: -7%, $lightness:  5%);\n    $stop-gradient-hover: adjust-color($base-color, $saturation:  8%, $lightness: -14%);\n\n    @if $grayscale == true {\n      $base-color-hover:    grayscale($base-color-hover);\n      $inset-shadow-hover:  grayscale($inset-shadow-hover);\n      $stop-gradient-hover: grayscale($stop-gradient-hover);\n    }\n\n    @include linear-gradient ($base-color-hover, $stop-gradient-hover);\n\n    box-shadow: inset 0 1px 0 0 $inset-shadow-hover;\n    cursor: pointer;\n  }\n\n  &:active:not(:disabled),\n  &:focus:not(:disabled) {\n    $border-active:       adjust-color($base-color, $saturation: 9%, $lightness: -14%);\n    $inset-shadow-active: adjust-color($base-color, $saturation: 7%, $lightness: -17%);\n\n    @if $grayscale == true {\n      $border-active:       grayscale($border-active);\n      $inset-shadow-active: grayscale($inset-shadow-active);\n    }\n\n    border: 1px solid $border-active;\n    box-shadow: inset 0 0 8px 4px $inset-shadow-active, inset 0 0 8px 4px $inset-shadow-active;\n  }\n}\n\n// Shiny Button\n@mixin shiny($base-color, $grayscale: false, $textsize: inherit, $padding: 7px 18px) {\n  $color:         hsl(0, 0, 100%);\n  $border:        adjust-color($base-color, $red: -117, $green: -111, $blue: -81);\n  $border-bottom: adjust-color($base-color, $red: -126, $green: -127, $blue: -122);\n  $fourth-stop:   adjust-color($base-color, $red: -79,  $green: -70,  $blue: -46);\n  $inset-shadow:  adjust-color($base-color, $red:  37,  $green:  29,  $blue:  12);\n  $second-stop:   adjust-color($base-color, $red: -56,  $green: -50,  $blue: -33);\n  $text-shadow:   adjust-color($base-color, $red: -140, $green: -141, $blue: -114);\n  $third-stop:    adjust-color($base-color, $red: -86,  $green: -75,  $blue: -48);\n\n  @if is-light($base-color) {\n    $color:       hsl(0, 0, 20%);\n    $text-shadow: adjust-color($base-color, $saturation: 10%, $lightness: 4%);\n  }\n\n  @if $grayscale == true {\n    $border:        grayscale($border);\n    $border-bottom: grayscale($border-bottom);\n    $fourth-stop:   grayscale($fourth-stop);\n    $inset-shadow:  grayscale($inset-shadow);\n    $second-stop:   grayscale($second-stop);\n    $text-shadow:   grayscale($text-shadow);\n    $third-stop:    grayscale($third-stop);\n  }\n\n  @include linear-gradient(top, $base-color 0%, $second-stop 50%, $third-stop 50%, $fourth-stop 100%);\n\n  border: 1px solid $border;\n  border-bottom: 1px solid $border-bottom;\n  border-radius: 5px;\n  box-shadow: inset 0 1px 0 0 $inset-shadow;\n  color: $color;\n  display: inline-block;\n  font-size: $textsize;\n  font-weight: bold;\n  padding: $padding;\n  text-align: center;\n  text-decoration: none;\n  text-shadow: 0 -1px 1px $text-shadow;\n\n  &:hover:not(:disabled) {\n    $first-stop-hover:  adjust-color($base-color, $red: -13, $green: -15, $blue: -18);\n    $second-stop-hover: adjust-color($base-color, $red: -66, $green: -62, $blue: -51);\n    $third-stop-hover:  adjust-color($base-color, $red: -93, $green: -85, $blue: -66);\n    $fourth-stop-hover: adjust-color($base-color, $red: -86, $green: -80, $blue: -63);\n\n    @if $grayscale == true {\n      $first-stop-hover:  grayscale($first-stop-hover);\n      $second-stop-hover: grayscale($second-stop-hover);\n      $third-stop-hover:  grayscale($third-stop-hover);\n      $fourth-stop-hover: grayscale($fourth-stop-hover);\n    }\n\n    @include linear-gradient(top, $first-stop-hover  0%,\n                                  $second-stop-hover 50%,\n                                  $third-stop-hover  50%,\n                                  $fourth-stop-hover 100%);\n    cursor: pointer;\n  }\n\n  &:active:not(:disabled),\n  &:focus:not(:disabled) {\n    $inset-shadow-active: adjust-color($base-color, $red: -111, $green: -116, $blue: -122);\n\n    @if $grayscale == true {\n      $inset-shadow-active: grayscale($inset-shadow-active);\n    }\n\n    box-shadow: inset 0 0 20px 0 $inset-shadow-active;\n  }\n}\n\n// Pill Button\n@mixin pill($base-color, $grayscale: false, $textsize: inherit, $padding: 7px 18px) {\n  $color:         hsl(0, 0, 100%);\n  $border-bottom: adjust-color($base-color, $hue:  8, $saturation: -11%, $lightness: -26%);\n  $border-sides:  adjust-color($base-color, $hue:  4, $saturation: -21%, $lightness: -21%);\n  $border-top:    adjust-color($base-color, $hue: -1, $saturation: -30%, $lightness: -15%);\n  $inset-shadow:  adjust-color($base-color, $hue: -1, $saturation: -1%,  $lightness:  7%);\n  $stop-gradient: adjust-color($base-color, $hue:  8, $saturation:  14%, $lightness: -10%);\n  $text-shadow:   adjust-color($base-color, $hue:  5, $saturation: -19%, $lightness: -15%);\n\n  @if is-light($base-color) {\n    $color:       hsl(0, 0, 20%);\n    $text-shadow: adjust-color($base-color, $saturation: 10%, $lightness: 4%);\n  }\n\n  @if $grayscale == true {\n    $border-bottom: grayscale($border-bottom);\n    $border-sides:  grayscale($border-sides);\n    $border-top:    grayscale($border-top);\n    $inset-shadow:  grayscale($inset-shadow);\n    $stop-gradient: grayscale($stop-gradient);\n    $text-shadow:   grayscale($text-shadow);\n  }\n\n  border: 1px solid $border-top;\n  border-color: $border-top $border-sides $border-bottom;\n  border-radius: 16px;\n  box-shadow: inset 0 1px 0 0 $inset-shadow;\n  color: $color;\n  display: inline-block;\n  font-size: $textsize;\n  font-weight: normal;\n  line-height: 1;\n  @include linear-gradient ($base-color, $stop-gradient);\n  padding: $padding;\n  text-align: center;\n  text-decoration: none;\n  text-shadow: 0 -1px 1px $text-shadow;\n  background-clip: padding-box;\n\n  &:hover:not(:disabled) {\n    $base-color-hover:    adjust-color($base-color,                                $lightness: -4.5%);\n    $border-bottom:       adjust-color($base-color, $hue:  8, $saturation:  13.5%, $lightness: -32%);\n    $border-sides:        adjust-color($base-color, $hue:  4, $saturation: -2%,    $lightness: -27%);\n    $border-top:          adjust-color($base-color, $hue: -1, $saturation: -17%,   $lightness: -21%);\n    $inset-shadow-hover:  adjust-color($base-color,           $saturation: -1%,    $lightness:  3%);\n    $stop-gradient-hover: adjust-color($base-color, $hue:  8, $saturation: -4%,    $lightness: -15.5%);\n    $text-shadow-hover:   adjust-color($base-color, $hue:  5, $saturation: -5%,    $lightness: -22%);\n\n    @if $grayscale == true {\n      $base-color-hover:    grayscale($base-color-hover);\n      $border-bottom:       grayscale($border-bottom);\n      $border-sides:        grayscale($border-sides);\n      $border-top:          grayscale($border-top);\n      $inset-shadow-hover:  grayscale($inset-shadow-hover);\n      $stop-gradient-hover: grayscale($stop-gradient-hover);\n      $text-shadow-hover:   grayscale($text-shadow-hover);\n    }\n\n    @include linear-gradient ($base-color-hover, $stop-gradient-hover);\n\n    background-clip: padding-box;\n    border: 1px solid $border-top;\n    border-color: $border-top $border-sides $border-bottom;\n    box-shadow: inset 0 1px 0 0 $inset-shadow-hover;\n    cursor: pointer;\n    text-shadow: 0 -1px 1px $text-shadow-hover;\n  }\n\n  &:active:not(:disabled),\n  &:focus:not(:disabled) {\n    $active-color:         adjust-color($base-color, $hue: 4,  $saturation: -12%,  $lightness: -10%);\n    $border-active:        adjust-color($base-color, $hue: 6,  $saturation: -2.5%, $lightness: -30%);\n    $border-bottom-active: adjust-color($base-color, $hue: 11, $saturation:  6%,   $lightness: -31%);\n    $inset-shadow-active:  adjust-color($base-color, $hue: 9,  $saturation:  2%,   $lightness: -21.5%);\n    $text-shadow-active:   adjust-color($base-color, $hue: 5,  $saturation: -12%,  $lightness: -21.5%);\n\n    @if $grayscale == true {\n      $active-color:         grayscale($active-color);\n      $border-active:        grayscale($border-active);\n      $border-bottom-active: grayscale($border-bottom-active);\n      $inset-shadow-active:  grayscale($inset-shadow-active);\n      $text-shadow-active:   grayscale($text-shadow-active);\n    }\n\n    background: $active-color;\n    border: 1px solid $border-active;\n    border-bottom: 1px solid $border-bottom-active;\n    box-shadow: inset 0 0 6px 3px $inset-shadow-active;\n    text-shadow: 0 -1px 1px $text-shadow-active;\n  }\n}\n\n// Flat Button\n@mixin flat($base-color, $grayscale: false, $textsize: inherit, $padding: 7px 18px) {\n  $color:         hsl(0, 0, 100%);\n\n  @if is-light($base-color) {\n    $color:       hsl(0, 0, 20%);\n  }\n\n  background-color: $base-color;\n  border-radius: 3px;\n  border: 0;\n  color: $color;\n  display: inline-block;\n  font-size: $textsize;\n  font-weight: bold;\n  padding: $padding;\n  text-decoration: none;\n  background-clip: padding-box;\n\n  &:hover:not(:disabled){\n    $base-color-hover:    adjust-color($base-color, $saturation: 4%, $lightness: 5%);\n\n    @if $grayscale == true {\n      $base-color-hover: grayscale($base-color-hover);\n    }\n\n    background-color: $base-color-hover;\n    cursor: pointer;\n  }\n\n  &:active:not(:disabled),\n  &:focus:not(:disabled) {\n    $base-color-active: adjust-color($base-color, $saturation: -4%, $lightness: -5%);\n\n    @if $grayscale == true {\n      $base-color-active: grayscale($base-color-active);\n    }\n\n    background-color: $base-color-active;\n    cursor: pointer;\n  }\n}\n\n// Flexible grid\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($width / $container-width);\n\n  @warn \"The flex-grid function is deprecated and will be removed in the next major version release\";\n}\n\n// Flexible gutter\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($gutter / $container-width);\n\n  @warn \"The flex-gutter function is deprecated and will be removed in the next major version release\";\n}\n\n@function grid-width($n) {\n  @return $n * $gw-column + ($n - 1) * $gw-gutter;\n\n  @warn \"The grid-width function is deprecated and will be removed in the next major version release\";\n}\n\n@function golden-ratio($value, $increment) {\n  @return modular-scale($increment, $value, $ratio: $golden);\n\n  @warn \"The golden-ratio function is deprecated and will be removed in the next major version release. Please use the modular-scale function, instead.\";\n}\n\n@mixin box-sizing($box) {\n  @include prefixer(box-sizing, $box, webkit moz spec);\n\n  @warn \"The box-sizing mixin is deprecated and will be removed in the next major version release. This property can now be used un-prefixed.\";\n}\n","//v4-alpha bootsrap grid\n//== Media queries breakpoints\n//\n//## Define the breakpoints at which your layout will change, adapting to different screen sizes.\n\n// Extra small screen / phone\n//** Deprecated `$screen-xs` as of v3.0.1\n$screen-xs:                  0 !default;\n//** Deprecated `$screen-xs-min` as of v3.2.0\n$screen-xs-min:              $screen-xs !default;\n//** Deprecated `$screen-phone` as of v3.0.1\n$screen-phone:               $screen-xs-min !default;\n\n// Small screen / phone\n//** Deprecated `$screen-sm` as of v3.0.1\n$screen-sm:                  576px !default;\n$screen-sm-min:              $screen-sm !default;\n//** Deprecated `$screen-tablet` as of v3.0.1\n\n\n// Medium screen / tablet\n//** Deprecated `$screen-md` as of v3.0.1\n$screen-md:                  768px !default;\n$screen-md-min:              $screen-md !default;\n\n  //** Deprecated `$screen-desktop` as of v3.0.1\n$screen-desktop:             $screen-md-min !default;\n\n// Large screen /  desktop\n//** Deprecated `$screen-lg` as of v3.0.1\n$screen-lg:                  992px !default;\n$screen-lg-min:              $screen-lg !default;\n//** Deprecated `$screen-lg-desktop` as of v3.0.1\n$screen-lg-desktop:          $screen-lg-min !default;\n\n// Extra Large screen / wide desktop\n//** Deprecated `$screen-lg` as of v3.0.1\n$screen-xl:                  1280px !default;\n$screen-xl-min:              $screen-xl !default;\n//** Deprecated `$screen-lg-desktop` as of v3.0.1\n$screen-xl-desktop:          $screen-xl-min !default;\n\n// So media queries don't overlap when required, provide a maximum\n$screen-xs-max:              ($screen-sm-min - 1) !default;\n$screen-sm-max:              ($screen-md-min - 1) !default;\n$screen-md-max:              ($screen-lg-min - 1) !default;\n$screen-lg-max:              ($screen-xl-min - 1) !default;\n\n\n//== Grid system\n//\n//## Define your custom responsive grid.\n\n//** Number of columns in the grid.\n$grid-columns:              12 !default;\n//** Padding between columns. Gets divided in half for the left and right.\n$grid-gutter-width:         30px !default;\n// Navbar collapse\n//** Point at which the navbar becomes uncollapsed.\n$grid-float-breakpoint:     $screen-sm-min !default;\n//** Point at which the navbar begins collapsing.\n$grid-float-breakpoint-max: ($grid-float-breakpoint - 1) !default;\n\n\n//== Container sizes\n//\n//## Define the maximum width of `.container` for different screen sizes.\n\n// Small screen / phone\n$container-phone:             (540px + $grid-gutter-width) !default;\n//** For `$screen-sm-min` and up.\n$container-sm:                 $container-phone !default;\n// Small screen / tablet\n$container-tablet:             (720px + $grid-gutter-width) !default;\n//** For `$screen-sm-min` and up.\n$container-md:                 $container-tablet !default;\n\n// Medium screen / desktop\n$container-desktop:            (940px + $grid-gutter-width) !default;\n//** For `$screen-md-min` and up.\n$container-lg:                 $container-desktop !default;\n\n// Large screen / wide desktop\n$container-large-desktop:      (1140px + $grid-gutter-width) !default;\n//** For `$screen-lg-min` and up.\n$container-xl:                 $container-large-desktop !default;\n","// Grid system\n//\n// Generate semantic grid columns with these mixins.\n\n// Centered container element\n@mixin container-fixed($gutter: $grid-gutter-width) {\n  margin-right: auto;\n  margin-left: auto;\n  padding-left:  floor(($gutter / 2));\n  padding-right: ceil(($gutter / 2));\n  @include clearfix;\n}\n\n// Creates a wrapper for a series of columns\n@mixin make-row($gutter: $grid-gutter-width) {\n  margin-left:  ceil(($gutter / -2));\n  margin-right: floor(($gutter / -2));\n  @include clearfix;\n}\n\n// Generate the extra small columns\n@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  float: left;\n  width: percentage(($columns / $grid-columns));\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n}\n@mixin make-xs-column-offset($columns) {\n  margin-left: percentage(($columns / $grid-columns));\n}\n@mixin make-xs-column-push($columns) {\n  left: percentage(($columns / $grid-columns));\n}\n@mixin make-xs-column-pull($columns) {\n  right: percentage(($columns / $grid-columns));\n}\n\n// Generate the small columns\n@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n\n  @media (min-width: $screen-sm-min) {\n    float: left;\n    width: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-sm-column-offset($columns) {\n  @media (min-width: $screen-sm-min) {\n    margin-left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-sm-column-push($columns) {\n  @media (min-width: $screen-sm-min) {\n    left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-sm-column-pull($columns) {\n  @media (min-width: $screen-sm-min) {\n    right: percentage(($columns / $grid-columns));\n  }\n}\n\n// Generate the medium columns\n@mixin make-md-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n\n  @media (min-width: $screen-md-min) {\n    float: left;\n    width: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-md-column-offset($columns) {\n  @media (min-width: $screen-md-min) {\n    margin-left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-md-column-push($columns) {\n  @media (min-width: $screen-md-min) {\n    left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-md-column-pull($columns) {\n  @media (min-width: $screen-md-min) {\n    right: percentage(($columns / $grid-columns));\n  }\n}\n\n// Generate the large columns\n@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n\n  @media (min-width: $screen-lg-min) {\n    float: left;\n    width: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-lg-column-offset($columns) {\n  @media (min-width: $screen-lg-min) {\n    margin-left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-lg-column-push($columns) {\n  @media (min-width: $screen-lg-min) {\n    left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-lg-column-pull($columns) {\n  @media (min-width: $screen-lg-min) {\n    right: percentage(($columns / $grid-columns));\n  }\n}\n\n// Generate the extra large columns\n@mixin make-xl-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n\n  @media (min-width: $screen-xl-min) {\n    float: left;\n    width: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-xl-column-offset($columns) {\n  @media (min-width: $screen-xl-min) {\n    margin-left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-xl-column-push($columns) {\n  @media (min-width: $screen-xl-min) {\n    left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-xl-column-pull($columns) {\n  @media (min-width: $screen-xl-min) {\n    right: percentage(($columns / $grid-columns));\n  }\n}\n\n// Generate the extra large columns\n@mixin make-xl-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n\n  @media (min-width: $screen-xl-min) {\n    float: left;\n    width: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-xl-column-offset($columns) {\n  @media (min-width: $screen-xl-min) {\n    margin-left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-xl-column-push($columns) {\n  @media (min-width: $screen-xl-min) {\n    left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-xl-column-pull($columns) {\n  @media (min-width: $screen-xl-min) {\n    right: percentage(($columns / $grid-columns));\n  }\n}\n","// Framework grid generation\n//\n// Used only by Bootstrap to generate the correct number of grid classes given\n// any value of `$grid-columns`.\n\n// [converter] This is defined recursively in LESS, but Sass supports real loops\n@mixin make-grid-columns($i: 1, $list: \".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, .col-xl-#{$i}\") {\n  @for $i from (1 + 1) through $grid-columns {\n    $list: \"#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, .col-xl-#{$i}\";\n  }\n  #{$list} {\n    position: relative;\n    // Prevent columns from collapsing when empty\n    min-height: 1px;\n    // Inner gutter via padding\n    padding-left:  ceil(($grid-gutter-width / 2));\n    padding-right: floor(($grid-gutter-width / 2));\n  }\n}\n\n\n// [converter] This is defined recursively in LESS, but Sass supports real loops\n@mixin float-grid-columns($class, $i: 1, $list: \".col-#{$class}-#{$i}\") {\n  @for $i from (1 + 1) through $grid-columns {\n    $list: \"#{$list}, .col-#{$class}-#{$i}\";\n  }\n  #{$list} {\n    float: left;\n  }\n}\n\n\n@mixin calc-grid-column($index, $class, $type) {\n  @if ($type == width) and ($index > 0) {\n    .col-#{$class}-#{$index} {\n      width: percentage(($index / $grid-columns));\n    }\n  }\n  @if ($type == push) and ($index > 0) {\n    .col-#{$class}-push-#{$index} {\n      left: percentage(($index / $grid-columns));\n    }\n  }\n  @if ($type == push) and ($index == 0) {\n    .col-#{$class}-push-0 {\n      left: auto;\n    }\n  }\n  @if ($type == pull) and ($index > 0) {\n    .col-#{$class}-pull-#{$index} {\n      right: percentage(($index / $grid-columns));\n    }\n  }\n  @if ($type == pull) and ($index == 0) {\n    .col-#{$class}-pull-0 {\n      right: auto;\n    }\n  }\n  @if ($type == offset) {\n    .col-#{$class}-offset-#{$index} {\n      margin-left: percentage(($index / $grid-columns));\n    }\n  }\n}\n\n// [converter] This is defined recursively in LESS, but Sass supports real loops\n@mixin loop-grid-columns($columns, $class, $type) {\n  @for $i from 0 through $columns {\n    @include calc-grid-column($i, $class, $type);\n  }\n}\n\n\n// Create grid for specific class\n@mixin make-grid($class) {\n  @include float-grid-columns($class);\n  @include loop-grid-columns($grid-columns, $class, width);\n  @include loop-grid-columns($grid-columns, $class, pull);\n  @include loop-grid-columns($grid-columns, $class, push);\n  @include loop-grid-columns($grid-columns, $class, offset);\n}\n","//\n// Grid system\n// --------------------------------------------------\n\n\n// Container widths\n//\n// Set the container width, and override it for fixed navbars in media queries.\n\n%container {\n  @include container-fixed;\n\n  @media (min-width: $screen-lg-min) {\n    width: $container-lg;\n  }\n  @media (min-width: $screen-xl-min) {\n    width: $container-xl;\n  }\n}\n\n.container {\n  @extend %container;\n}\n\n// Fluid container\n//\n// Utilizes the mixin meant for fixed width containers, but without any defined\n// width for fluid, full width layouts.\n\n.container-fluid {\n  @include container-fixed;\n}\n\n\n// Row\n//\n// Rows contain and clear the floats of your columns.\n\n.row {\n  @include make-row;\n}\n\n\n// Columns\n//\n// Common styles for small and large grid columns\n\n@include make-grid-columns;\n\n\n// Extra small grid\n//\n// Columns, offsets, pushes, and pulls for extra small devices like\n// smartphones.\n\n@include make-grid(xs);\n\n\n// Small grid\n//\n// Columns, offsets, pushes, and pulls for the small device range, from phones\n// to tablets.\n\n@media (min-width: $screen-sm-min) {\n  @include make-grid(sm);\n}\n\n\n// Medium grid\n//\n// Columns, offsets, pushes, and pulls for the desktop device range.\n\n@media (min-width: $screen-md-min) {\n  @include make-grid(md);\n}\n\n\n// Large grid\n//\n// Columns, offsets, pushes, and pulls for the large desktop device range.\n\n@media (min-width: $screen-lg-min) {\n  @include make-grid(lg);\n}\n\n// Extra  Large grid\n//\n// Columns, offsets, pushes, and pulls for the large desktop device range.\n\n@media (min-width: $screen-xl-min) {\n  @include make-grid(xl);\n}\n\n// Set doubled, 60px, padding for columns, up to 767px.\n.gutter-60-md > [class^=\"col-\"],\n.gutter-60-md > [class*=\" col-\"] {\n  @media (min-width: $screen-md-min) {\n    padding-right: rem($grid-gutter-width);\n    padding-left: rem($grid-gutter-width);\n  }\n}\n","// Responsive utilities\n\n//\n// More easily include all the states for responsive-utilities.less.\n// [converter] $parent hack\n@mixin responsive-visibility($parent) {\n  #{$parent} {\n    display: block !important;\n  }\n  table#{$parent}  { display: table !important; }\n  tr#{$parent}     { display: table-row !important; }\n  th#{$parent},\n  td#{$parent}     { display: table-cell !important; }\n}\n\n// [converter] $parent hack\n@mixin responsive-invisibility($parent) {\n  #{$parent} {\n    display: none !important;\n  }\n}\n","//\n// Responsive: Utility classes\n// --------------------------------------------------\n\n\n// IE10 in Windows (Phone) 8\n//\n// Support for responsive views via media queries is kind of borked in IE10, for\n// Surface/desktop in split view and for Windows Phone 8. This particular fix\n// must be accompanied by a snippet of JavaScript to sniff the user agent and\n// apply some conditional CSS to *only* the Surface/desktop Windows 8. Look at\n// our Getting Started page for more information on this bug.\n//\n// For more information, see the following:\n//\n// Issue: https://github.com/twbs/bootstrap/issues/10497\n// Docs: http://getbootstrap.com/getting-started/#support-ie10-width\n// Source: http://timkadlec.com/2013/01/windows-phone-8-and-device-width/\n// Source: http://timkadlec.com/2012/10/ie10-snap-mode-and-responsive-design/\n\n@at-root {\n  @-ms-viewport {\n    width: device-width;\n  }\n}\n\n\n// Visibility utilities\n// Note: Deprecated .visible-xs, .visible-sm, .visible-md, and .visible-lg as of v3.2.0\n\n@include responsive-invisibility('.visible-xs');\n@include responsive-invisibility('.visible-sm');\n@include responsive-invisibility('.visible-md');\n@include responsive-invisibility('.visible-lg');\n\n.visible-xs-block,\n.visible-xs-inline,\n.visible-xs-inline-block,\n.visible-sm-block,\n.visible-sm-inline,\n.visible-sm-inline-block,\n.visible-md-block,\n.visible-md-inline,\n.visible-md-inline-block,\n.visible-lg-block,\n.visible-lg-inline,\n.visible-lg-inline-block {\n  display: none !important;\n}\n\n@media (max-width: $screen-xs-max) {\n  @include responsive-visibility('.visible-xs');\n}\n.visible-xs-block {\n  @media (max-width: $screen-xs-max) {\n    display: block !important;\n  }\n}\n.visible-xs-inline {\n  @media (max-width: $screen-xs-max) {\n    display: inline !important;\n  }\n}\n.visible-xs-inline-block {\n  @media (max-width: $screen-xs-max) {\n    display: inline-block !important;\n  }\n}\n\n@media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {\n  @include responsive-visibility('.visible-sm');\n}\n.visible-sm-block {\n  @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {\n    display: block !important;\n  }\n}\n.visible-sm-inline {\n  @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {\n    display: inline !important;\n  }\n}\n.visible-sm-inline-block {\n  @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {\n    display: inline-block !important;\n  }\n}\n\n@media (min-width: $screen-md-min) and (max-width: $screen-md-max) {\n  @include responsive-visibility('.visible-md');\n}\n.visible-md-block {\n  @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {\n    display: block !important;\n  }\n}\n.visible-md-inline {\n  @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {\n    display: inline !important;\n  }\n}\n.visible-md-inline-block {\n  @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {\n    display: inline-block !important;\n  }\n}\n\n@media (min-width: $screen-lg-min) {\n  @include responsive-visibility('.visible-lg');\n}\n.visible-lg-block {\n  @media (min-width: $screen-lg-min) {\n    display: block !important;\n  }\n}\n.visible-lg-inline {\n  @media (min-width: $screen-lg-min) {\n    display: inline !important;\n  }\n}\n.visible-lg-inline-block {\n  @media (min-width: $screen-lg-min) {\n    display: inline-block !important;\n  }\n}\n\n@media (max-width: $screen-xs-max) {\n  @include responsive-invisibility('.hidden-xs');\n}\n\n@media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {\n  @include responsive-invisibility('.hidden-sm');\n}\n\n@media (min-width: $screen-md-min) and (max-width: $screen-md-max) {\n  @include responsive-invisibility('.hidden-md');\n}\n\n@media (min-width: $screen-lg-min) {\n  @include responsive-invisibility('.hidden-lg');\n}\n\n\n// Print utilities\n//\n// Media queries are placed on the inside to be mixin-friendly.\n\n// Note: Deprecated .visible-print as of v3.2.0\n\n@include responsive-invisibility('.visible-print');\n\n@media print {\n  @include responsive-visibility('.visible-print');\n}\n.visible-print-block {\n  display: none !important;\n\n  @media print {\n    display: block !important;\n  }\n}\n.visible-print-inline {\n  display: none !important;\n\n  @media print {\n    display: inline !important;\n  }\n}\n.visible-print-inline-block {\n  display: none !important;\n\n  @media print {\n    display: inline-block !important;\n  }\n}\n\n@media print {\n  @include responsive-invisibility('.hidden-print');\n}\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","//////////////////////////////\n// Has Setting\n//////////////////////////////\n@function breakpoint-has($setting) {\n  @if map-has-key($breakpoint, $setting) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Get Settings\n//////////////////////////////\n@function breakpoint-get($setting) {\n  @if breakpoint-has($setting) {\n    @return map-get($breakpoint, $setting);\n  }\n  @else {\n    @return map-get($Breakpoint-Settings, $setting);\n  }\n}\n\n//////////////////////////////\n// Set Settings\n//////////////////////////////\n@function breakpoint-set($setting, $value) {\n  @if (str-index($setting, '-') or str-index($setting, '_')) and str-index($setting, ' ') == null {\n    @warn \"Words in Breakpoint settings should be separated by spaces, not dashes or underscores. Please replace dashes and underscores between words with spaces. Settings will not work as expected until changed.\";\n  }\n  $breakpoint: map-merge($breakpoint, ($setting: $value)) !global;\n  @return true;\n}\n\n@mixin breakpoint-change($setting, $value) {\n  $breakpoint-change: breakpoint-set($setting, $value);\n}\n\n@mixin breakpoint-set($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n\n@mixin bkpt-change($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n@mixin bkpt-set($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n\n//////////////////////////////\n// Remove Setting\n//////////////////////////////\n@function breakpoint-reset($settings...) {\n  @if length($settings) == 1 {\n    $settings: nth($settings, 1);\n  }\n\n  @each $setting in $settings {\n    $breakpoint: map-remove($breakpoint, $setting) !global;\n  }\n  @return true;\n}\n\n@mixin breakpoint-reset($settings...) {\n  $breakpoint-reset: breakpoint-reset($settings);\n}\n\n@mixin bkpt-reset($settings...) {\n  $breakpoint-reset: breakpoint-reset($settings);\n}","//////////////////////////////\n// Private Breakpoint Variables\n//////////////////////////////\n$private-breakpoint-context-holder: ();\n$private-breakpoint-query-count: 0 !default;\n\n//////////////////////////////\n// Breakpoint Has Context\n// Returns whether or not you are inside a Breakpoint query\n//////////////////////////////\n@function breakpoint-has-context() {\n  @if length($private-breakpoint-query-count) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Breakpoint Get Context\n// $feature: Input feature to get it's current MQ context. Returns false if no context\n//////////////////////////////\n@function breakpoint-get-context($feature) {\n  @if map-has-key($private-breakpoint-context-holder, $feature) {\n    $get: map-get($private-breakpoint-context-holder, $feature);\n    // Special handling of no-query from get side so /false/ prepends aren't returned\n    @if $feature == 'no-query' {\n      @if type-of($get) == 'list' and length($get) > 1 and nth($get, 1) == false {\n        $get: nth($get, length($get));\n      }\n    }\n    @return $get;\n  }\n  @else {\n    @if breakpoint-has-context() and $feature == 'media' {\n      @return breakpoint-get('default media');\n    }\n    @else {\n      @return false;\n    }\n  }\n}\n\n//////////////////////////////\n// Private function to set context\n//////////////////////////////\n@function private-breakpoint-set-context($feature, $value) {\n  @if $value == 'monochrome' {\n    $feature: 'monochrome';\n  }\n\n  $current: map-get($private-breakpoint-context-holder, $feature);\n  @if $current and length($current) == $private-breakpoint-query-count {\n    @warn \"You have already queried against `#{$feature}`. Unexpected things may happen if you query against the same feature more than once in the same `and` query. Breakpoint is overwriting the current context with `#{$value}`\";\n  }\n\n  @if not map-has-key($private-breakpoint-context-holder, $feature) {\n    $v-holder: ();\n    @for $i from 1 to $private-breakpoint-query-count {\n      @if $feature == 'media' {\n        $v-holder: append($v-holder, breakpoint-get('default media'));\n      }\n      @else {\n        $v-holder: append($v-holder, false);\n      }\n    }\n    $v-holder: append($v-holder, $value);\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($feature: $v-holder)) !global;\n  }\n  @else {\n    $v-holder: map-get($private-breakpoint-context-holder, $feature);\n    $length: length($v-holder);\n    @for $i from $length to $private-breakpoint-query-count - 1 {\n      @if $feature == 'media' {\n        $v-holder: append($v-holder, breakpoint-get('default media'));\n      }\n      @else {\n        $v-holder: append($v-holder, false);\n      }\n    }\n    $v-holder: append($v-holder, $value);\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($feature: $v-holder)) !global;\n  }\n\n  @return true;\n}\n\n//////////////////////////////\n// Private function to reset context\n//////////////////////////////\n@mixin private-breakpoint-reset-contexts {\n  $private-breakpoint-context-holder: () !global;\n  $private-breakpoint-query-count: 0 !global;\n}","//////////////////////////////\n// Converts the input value to Base EMs\n//////////////////////////////\n@function breakpoint-to-base-em($value) {\n  $value-unit: unit($value);\n\n  // Will convert relative EMs into root EMs.\n  @if breakpoint-get('base font size') and type-of(breakpoint-get('base font size')) == 'number' and $value-unit == 'em' {\n    $base-unit: unit(breakpoint-get('base font size'));\n\n    @if $base-unit == 'px' or $base-unit == '%' or $base-unit == 'em' or $base-unit == 'pt' {\n      @return base-conversion($value) / base-conversion(breakpoint-get('base font size')) * 1em;\n    }\n    @else {\n      @warn '#{breakpoint-get(\\'base font size\\')} is not set in valid units for font size!';\n      @return false;\n    }\n  }\n  @else {\n    @return base-conversion($value);\n  }\n}\n\n@function base-conversion($value) {\n  $unit: unit($value);\n\n  @if $unit == 'px' {\n    @return $value / 16px * 1em;\n  }\n  @else if $unit == '%' {\n    @return $value / 100% * 1em;\n  }\n  @else if $unit == 'em' {\n    @return $value;\n  }\n  @else if $unit == 'pt' {\n    @return $value / 12pt * 1em;\n  }\n  @else {\n    @return $value;\n//    @warn 'Everything is terrible! What have you done?!';\n  }\n}\n\n//////////////////////////////\n// Returns whether the feature can have a min/max pair\n//////////////////////////////\n$breakpoint-min-max-features: 'color',\n                              'color-index',\n                              'aspect-ratio',\n                              'device-aspect-ratio',\n                              'device-height',\n                              'device-width',\n                              'height',\n                              'monochrome',\n                              'resolution',\n                              'width';\n\n@function breakpoint-min-max($feature) {\n  @each $item in $breakpoint-min-max-features {\n    @if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature can have a string value\n//////////////////////////////\n$breakpoint-string-features:  'orientation',\n                              'scan',\n                              'color',\n                              'aspect-ratio',\n                              'device-aspect-ratio',\n                              'pointer',\n                              'luminosity';\n\n@function breakpoint-string-value($feature) {\n  @each $item in $breakpoint-string-features {\n    @if breakpoint-min-max($item) {\n      @if $feature == 'min-#{$item}' or $feature == 'max-#{$item}' {\n        @return true;\n      }\n    }\n    @else if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature is a media type\n//////////////////////////////\n$breakpoint-media-types:  'all',\n                          'braille',\n                          'embossed',\n                          'handheld',\n                          'print',\n                          'projection',\n                          'screen',\n                          'speech',\n                          'tty',\n                          'tv';\n\n@function breakpoint-is-media($feature) {\n  @each $media in $breakpoint-media-types {\n    @if ($feature == $media) or ($feature == 'not #{$media}') or ($feature == 'only #{$media}') {\n      @return true;\n    }\n  }\n\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature can stand alone\n//////////////////////////////\n$breakpoint-single-string-features: 'color',\n                                    'color-index',\n                                    'grid',\n                                    'monochrome';\n\n@function breakpoint-single-string($feature) {\n  @each $item in $breakpoint-single-string-features {\n    @if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature\n//////////////////////////////\n@function breakpoint-is-resolution($feature) {\n  $resolutions: 'device-pixel-ratio', 'dpr';\n\n  @if breakpoint-get('transform resolutions') {\n    $resolutions: append($resolutions, 'resolution');\n  }\n\n  @each $reso in $resolutions {\n    @if index($feature, $reso) or index($feature, 'min-#{$reso}') or index($feature, 'max-#{$reso}') {\n      @return true;\n    }\n  }\n\n  @return false;\n}\n","//////////////////////////////\n// Import Parser Pieces\n//////////////////////////////\n@import \"parsers/query\";\n@import \"parsers/single\";\n@import \"parsers/double\";\n@import \"parsers/triple\";\n@import \"parsers/resolution\";\n\n$Memo-Exists: function-exists(memo-get) and function-exists(memo-set);\n\n//////////////////////////////\n// Breakpoint Function\n//////////////////////////////\n@function breakpoint($query, $contexts...) {\n  $run: true;\n  $return: ();\n\n  // Grab the Memo Output if Memoization can be a thing\n  @if $Memo-Exists {\n    $return: memo-get(breakpoint, breakpoint $query $contexts);\n\n    @if $return != null {\n      $run: false;\n    }\n  }\n\n  @if not $Memo-Exists or $run {\n    // Internal Variables\n    $query-string: '';\n    $query-fallback: false;\n    $return: ();\n\n    // Reserve Global Private Breakpoint Context\n    $holder-context: $private-breakpoint-context-holder;\n    $holder-query-count: $private-breakpoint-query-count;\n\n    // Reset Global Private Breakpoint Context\n    $private-breakpoint-context-holder: () !global;\n    $private-breakpoint-query-count: 0 !global;\n\n\n    // Test to see if it's a comma-separated list\n    $or-list: if(list-separator($query) == 'comma', true, false);\n\n\n    @if ($or-list == false and breakpoint-get('legacy syntax') == false) {\n      $query-string: breakpoint-parse($query);\n    }\n    @else {\n      $length: length($query);\n\n      $last: nth($query, $length);\n      $query-fallback: breakpoint-no-query($last);\n\n      @if ($query-fallback != false) {\n        $length: $length - 1;\n      }\n\n      @if (breakpoint-get('legacy syntax') == true) {\n        $mq: ();\n\n        @for $i from 1 through $length {\n          $mq: append($mq, nth($query, $i), comma);\n        }\n\n        $query-string: breakpoint-parse($mq);\n      }\n      @else {\n        $query-string: '';\n        @for $i from 1 through $length {\n          $query-string: $query-string + if($i == 1, '', ', ') + breakpoint-parse(nth($query, $i));\n        }\n      }\n    }\n\n    $return: ('query': $query-string,\n        'fallback': $query-fallback,\n        'context holder': $private-breakpoint-context-holder,\n        'query count': $private-breakpoint-query-count\n    );\n    @if length($contexts) > 0 and nth($contexts, 1) != false {\n      @if $query-fallback != false {\n        $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n      }\n      $context-map: ();\n      @each $context in $contexts {\n        $context-map: map-merge($context-map, ($context: breakpoint-get-context($context)));\n      }\n      $return: map-merge($return, (context: $context-map));\n    }\n\n    // Reset Global Private Breakpoint Context\n    $private-breakpoint-context-holder: () !global;\n    $private-breakpoint-query-count: 0 !global;\n\n    @if $Memo-Exists {\n      $holder: memo-set(breakpoint, breakpoint $query $contexts, $return);\n    }\n  }\n\n  @return $return;\n}\n\n//////////////////////////////\n// General Breakpoint Parser\n//////////////////////////////\n@function breakpoint-parse($query) {\n  // Increase number of 'and' queries\n  $private-breakpoint-query-count: $private-breakpoint-query-count + 1 !global;\n\n  // Set up Media Type\n  $query-print: '';\n\n  $force-all: ((breakpoint-get('force all media type') == true) and (breakpoint-get('default media') == 'all'));\n  $empty-media: true;\n  @if ($force-all == true) or (breakpoint-get('default media') != 'all') {\n    // Force the print of the default media type if (force all is true and default media type is all) or (default media type is not all)\n    $query-print: breakpoint-get('default media');\n    $empty-media: false;\n  }\n\n\n  $query-resolution: false;\n\n  $query-holder: breakpoint-parse-query($query);\n\n\n\n  // Loop over each parsed out query and write it to $query-print\n  $first: true;\n\n  @each $feature in $query-holder {\n    $length: length($feature);\n\n    // Parse a single feature\n    @if ($length == 1) {\n      // Feature is currently a list, grab the actual value\n      $feature: nth($feature, 1);\n\n      // Media Type must by convention be the first item, so it's safe to flat override $query-print, which right now should only be the default media type\n      @if (breakpoint-is-media($feature)) {\n        @if ($force-all == true) or ($feature != 'all') {\n          // Force the print of the default media type if (force all is true and default media type is all) or (default media type is not all)\n          $query-print: $feature;\n          $empty-media: false;\n\n          // Set Context\n          $context-setter: private-breakpoint-set-context(media, $query-print);\n        }\n      }\n      @else {\n        $parsed: breakpoint-parse-single($feature, $empty-media, $first);\n        $query-print: '#{$query-print} #{$parsed}';\n        $first: false;\n      }\n    }\n    // Parse a double feature\n    @else if ($length == 2) {\n      @if (breakpoint-is-resolution($feature) != false) {\n        $query-resolution: $feature;\n      }\n      @else {\n        $parsed: null;\n        // If it's a string/number pair,\n        // we check to see if one is a single-string value,\n        // then we parse it as a normal double\n        $alpha: nth($feature, 1);\n        $beta: nth($feature, 2);\n        @if breakpoint-single-string($alpha) or breakpoint-single-string($beta) {\n          $parsed: breakpoint-parse-single($alpha, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n          $first: false;\n          $parsed: breakpoint-parse-single($beta, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n        }\n        @else {\n          $parsed: breakpoint-parse-double($feature, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n          $first: false;\n        }\n      }\n    }\n    // Parse a triple feature\n    @else if ($length == 3) {\n      $parsed: breakpoint-parse-triple($feature, $empty-media, $first);\n      $query-print: '#{$query-print} #{$parsed}';\n      $first: false;\n    }\n\n  }\n\n  @if ($query-resolution != false) {\n    $query-print: breakpoint-build-resolution($query-print, $query-resolution, $empty-media, $first);\n  }\n\n  // Loop through each feature that's been detected so far and append 'false' to the the value list to increment their counters\n  @each $f, $v in $private-breakpoint-context-holder {\n    $v-holder: $v;\n    $length: length($v-holder);\n    @if length($v-holder) < $private-breakpoint-query-count {\n      @for $i from $length to $private-breakpoint-query-count {\n        @if $f == 'media' {\n          $v-holder: append($v-holder, breakpoint-get('default media'));\n        }\n        @else {\n          $v-holder: append($v-holder, false);\n        }\n      }\n    }\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($f: $v-holder)) !global;\n  }\n\n  @return $query-print;\n}\n","@function breakpoint-parse-query($query) {\n  // Parse features out of an individual query\n  $feature-holder: ();\n  $query-holder: ();\n  $length: length($query);\n\n  @if $length == 2 {\n    // If we've got a string/number, number/string, check to see if it's a valid string/number pair or two singles\n    @if (type-of(nth($query, 1)) == 'string' and type-of(nth($query, 2)) == 'number') or (type-of(nth($query, 1)) == 'number' and type-of(nth($query, 2)) == 'string') {\n\n      $number: '';\n      $value: '';\n\n      @if type-of(nth($query, 1)) == 'string' {\n        $number: nth($query, 2);\n        $value: nth($query, 1);\n      }\n      @else {\n        $number: nth($query, 1);\n        $value: nth($query, 2);\n      }\n\n      // If the string value can be a single value, check to see if the number passed in is a valid input for said single value. Fortunately, all current single-value options only accept unitless numbers, so this check is easy.\n      @if breakpoint-single-string($value) {\n        @if unitless($number) {\n          $feature-holder: append($value, $number, space);\n          $query-holder: append($query-holder, $feature-holder, comma);\n          @return $query-holder;\n        }\n      }\n      // If the string is a media type, split the query\n      @if breakpoint-is-media($value) {\n        $query-holder: append($query-holder, nth($query, 1));\n        $query-holder: append($query-holder, nth($query, 2));\n        @return $query-holder;\n      }\n      // If it's not a single feature, we're just going to assume it's a proper string/value pair, and roll with it.\n      @else {\n        $feature-holder: append($value, $number, space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n\n    }\n    // If they're both numbers, we assume it's a double and roll with that\n    @else if (type-of(nth($query, 1)) == 'number' and type-of(nth($query, 2)) == 'number') {\n      $feature-holder: append(nth($query, 1), nth($query, 2), space);\n      $query-holder: append($query-holder, $feature-holder, comma);\n      @return $query-holder;\n    }\n    // If they're both strings and neither are singles, we roll with that.\n    @else if (type-of(nth($query, 1)) == 'string' and type-of(nth($query, 2)) == 'string') {\n      @if not breakpoint-single-string(nth($query, 1)) and not breakpoint-single-string(nth($query, 2)) {\n        $feature-holder: append(nth($query, 1), nth($query, 2), space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n    }\n  }\n  @else if $length == 3 {\n    // If we've got three items and none is a list, we check to see\n    @if type-of(nth($query, 1)) != 'list' and type-of(nth($query, 2)) != 'list' and type-of(nth($query, 3)) != 'list' {\n      // If none of the items are single string values and none of the values are media values, we're good.\n      @if (not breakpoint-single-string(nth($query, 1)) and not breakpoint-single-string(nth($query, 2)) and not breakpoint-single-string(nth($query, 3))) and  ((not breakpoint-is-media(nth($query, 1)) and not breakpoint-is-media(nth($query, 2)) and not breakpoint-is-media(nth($query, 3)))) {\n        $feature-holder: append(nth($query, 1), nth($query, 2), space);\n        $feature-holder: append($feature-holder, nth($query, 3), space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n      // let's check to see if the first item is a media type\n      @else if breakpoint-is-media(nth($query, 1)) {\n        $query-holder: append($query-holder, nth($query, 1));\n        $feature-holder: append(nth($query, 2), nth($query, 3), space);\n        $query-holder: append($query-holder, $feature-holder);\n        @return $query-holder;\n      }\n    }\n  }\n\n  // If it's a single item, or if it's not a special case double or triple, we can simply return the query.\n  @return $query;\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"single/default\";\n\n@function breakpoint-parse-single($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  // If it's a single feature that can stand alone, we let it\n  @if (breakpoint-single-string($feature)) {\n    $parsed: $feature;\n    // Set Context\n    $context-setter: private-breakpoint-set-context($feature, $feature);\n  }\n  // If it's not a stand alone feature, we pass it off to the default handler.\n  @else {\n    $parsed: breakpoint-parse-default($feature);\n  }\n\n  @return $leader + '(' + $parsed + ')';\n}\n","@function breakpoint-parse-default($feature) {\n  $default: breakpoint-get('default feature');\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($default, $feature);\n\n  @if (breakpoint-get('to ems') == true) and (type-of($feature) == 'number') {\n    @return '#{$default}: #{breakpoint-to-base-em($feature)}';\n  }\n  @else {\n    @return '#{$default}: #{$feature}';\n  }\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"double/default-pair\";\n@import \"double/double-string\";\n@import \"double/default\";\n\n@function breakpoint-parse-double($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  $first: nth($feature, 1);\n  $second: nth($feature, 2);\n\n  // If we've got two numbers, we know we need to use the default pair because there are no media queries that has a media feature that is a number\n  @if type-of($first) == 'number' and type-of($second) == 'number' {\n    $parsed: breakpoint-parse-default-pair($first, $second);\n  }\n  // If they are both strings, we send it through the string parser\n  @else if type-of($first) == 'string' and type-of($second) == 'string' {\n    $parsed: breakpoint-parse-double-string($first, $second);\n  }\n  // If it's a string/number pair, we parse it as a normal double\n  @else {\n    $parsed: breakpoint-parse-double-default($first, $second);\n  }\n\n  @return $leader + $parsed;\n}\n","@function breakpoint-parse-default-pair($first, $second) {\n  $default: breakpoint-get('default pair');\n  $min: '';\n  $max: '';\n\n  // Sort into min and max\n  $min: min($first, $second);\n  $max: max($first, $second);\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context(min-#{$default}, $min);\n  $context-setter: private-breakpoint-set-context(max-#{$default}, $max);\n\n  // Make them EMs if need be\n  @if (breakpoint-get('to ems') == true) {\n    $min: breakpoint-to-base-em($min);\n    $max: breakpoint-to-base-em($max);\n  }\n\n  @return '(min-#{$default}: #{$min}) and (max-#{$default}: #{$max})';\n}\n","@function breakpoint-parse-double-string($first, $second) {\n  $feature: '';\n  $value: '';\n\n  // Test to see which is the feature and which is the value\n  @if (breakpoint-string-value($first) == true) {\n    $feature: $first;\n    $value: $second;\n  }\n  @else if (breakpoint-string-value($second) == true) {\n    $feature: $second;\n    $value: $first;\n  }\n  @else {\n    @warn \"Neither #{$first} nor #{$second} is a valid media query name.\";\n  }\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($feature, $value);\n\n  @return '(#{$feature}: #{$value})';\n}","@function breakpoint-parse-double-default($first, $second) {\n  $feature: '';\n  $value: '';\n\n  @if type-of($first) == 'string' {\n    $feature: $first;\n    $value: $second;\n  }\n  @else {\n    $feature: $second;\n    $value: $first;\n  }\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($feature, $value);\n\n  @if (breakpoint-get('to ems') == true) {\n    $value: breakpoint-to-base-em($value);\n  }\n\n  @return '(#{$feature}: #{$value})'\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"triple/default\";\n\n@function breakpoint-parse-triple($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  // separate the string features from the value numbers\n  $string: null;\n  $numbers: null;\n  @each $val in $feature {\n    @if type-of($val) == string {\n      $string: $val;\n    }\n    @else {\n      @if type-of($numbers) == 'null' {\n        $numbers: $val;\n      }\n      @else {\n        $numbers: append($numbers, $val);\n      }\n    }\n  }\n\n  $parsed: breakpoint-parse-triple-default($string, nth($numbers, 1), nth($numbers, 2));\n\n  @return $leader + $parsed;\n\n}\n","@function breakpoint-parse-triple-default($feature, $first, $second) {\n\n  // Sort into min and max\n  $min: min($first, $second);\n  $max: max($first, $second);\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context(min-#{$feature}, $min);\n  $context-setter: private-breakpoint-set-context(max-#{$feature}, $max);\n\n  // Make them EMs if need be\n  @if (breakpoint-get('to ems') == true) {\n    $min: breakpoint-to-base-em($min);\n    $max: breakpoint-to-base-em($max);\n  }\n\n  @return '(min-#{$feature}: #{$min}) and (max-#{$feature}: #{$max})';\n}\n","@import \"resolution/resolution\";\n\n@function breakpoint-build-resolution($query-print, $query-resolution, $empty-media, $first) {\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  @if breakpoint-get('transform resolutions') and $query-resolution {\n    $resolutions: breakpoint-make-resolutions($query-resolution);\n    $length: length($resolutions);\n    $query-holder: '';\n\n    @for $i from 1 through $length {\n      $query: '#{$query-print} #{$leader}#{nth($resolutions, $i)}';\n      @if $i == 1 {\n        $query-holder: $query;\n      }\n      @else {\n        $query-holder: '#{$query-holder}, #{$query}';\n      }\n    }\n\n    @return $query-holder;\n  }\n  @else {\n    // Return with attached resolution\n    @return $query-print;\n  }\n}\n","@function breakpoint-make-resolutions($resolution) {\n  $length: length($resolution);\n\n  $output: ();\n\n  @if $length == 2 {\n    $feature: '';\n    $value: '';\n\n    // Find which is number\n    @if type-of(nth($resolution, 1)) == 'number' {\n      $value: nth($resolution, 1);\n    }\n    @else {\n      $value: nth($resolution, 2);\n    }\n\n    // Determine min/max/standard\n    @if index($resolution, 'min-resolution') {\n      $feature: 'min-';\n    }\n    @else if index($resolution, 'max-resolution') {\n      $feature: 'max-';\n    }\n\n    $standard: '(#{$feature}resolution: #{$value})';\n\n    // If we're not dealing with dppx,\n    @if unit($value) != 'dppx' {\n      $base: 96dpi;\n      @if unit($value) == 'dpcm' {\n        $base: 243.84dpcm;\n      }\n      // Write out feature tests\n      $webkit: '';\n      $moz: '';\n      $webkit: '(-webkit-#{$feature}device-pixel-ratio: #{$value / $base})';\n      $moz: '(#{$feature}-moz-device-pixel-ratio: #{$value / $base})';\n      // Append to output\n      $output: append($output, $standard, space);\n      $output: append($output, $webkit, space);\n      $output: append($output, $moz, space);\n    }\n    @else {\n      $webkit: '';\n      $moz: '';\n      $webkit: '(-webkit-#{$feature}device-pixel-ratio: #{$value / 1dppx})';\n      $moz: '(#{$feature}-moz-device-pixel-ratio: #{$value / 1dppx})';\n      $fallback: '(#{$feature}resolution: #{$value / 1dppx * 96dpi})';\n      // Append to output\n      $output: append($output, $standard, space);\n      $output: append($output, $webkit, space);\n      $output: append($output, $moz, space);\n      $output: append($output, $fallback, space);\n    }\n\n  }\n\n  @return $output;\n}\n","@function breakpoint-no-query($query) {\n  @if type-of($query) == 'list' {\n    $keyword: nth($query, 1);\n\n    @if type-of($keyword) == 'string' and ($keyword == 'no-query' or $keyword == 'no query' or $keyword == 'fallback') {\n      @return nth($query, 2);\n    }\n    @else {\n      @return false;\n    }\n  }\n  @else {\n    @return false;\n  }\n}\n","////////////////////////\n// Default the Breakpoints variable\n////////////////////////\n$breakpoints: () !default;\n$BREAKPOINTS: () !default;\n\n////////////////////////\n// Respond-to API Mixin\n////////////////////////\n@mixin respond-to($context, $no-query: false) {\n  @if length($breakpoints) > 0 and length($BREAKPOINTS) == 0 {\n    @warn \"In order to avoid variable namespace collisions, we have updated the way to add breakpoints for respond-to. Please change all instances of `$breakpoints: add-breakpoint()` to `@include add-breakpoint()`. The `add-breakpoint()` function will be deprecated in a future release.\";\n    $BREAKPOINTS: $breakpoints !global;\n    $breakpoints: () !global;\n  }\n\n  @if type-of($BREAKPOINTS) != 'map' {\n    // Just in case someone writes gibberish to the $breakpoints variable.\n    @warn \"Your breakpoints aren't a map! `respond-to` expects a map. Please check the value of $BREAKPOINTS variable.\";\n    @content;\n  }\n  @else if map-has-key($BREAKPOINTS, $context) {\n    @include breakpoint(map-get($BREAKPOINTS, $context), $no-query) {\n      @content;\n    }\n  }\n  @else if not map-has-key($BREAKPOINTS, $context) {\n    @warn \"`#{$context}` isn't a defined breakpoint! Please add it using `$breakpoints: add-breakpoint(`#{$context}`, $value);`\";\n    @content;\n  }\n  @else {\n    @warn \"You haven't created any breakpoints yet! Make some already! `@include add-breakpoint($name, $bkpt)`\";\n    @content;\n  }\n}\n\n//////////////////////////////\n// Add Breakpoint to Breakpoints\n// TODO: Remove function in next release\n//////////////////////////////\n@function add-breakpoint($name, $bkpt, $overwrite: false) {\n  $output: ($name: $bkpt);\n\n  @if length($breakpoints) == 0 {\n    @return $output;\n  }\n  @else {\n    @if map-has-key($breakpoints, $name) and $overwrite != true {\n      @warn \"You already have a breakpoint named `#{$name}`, please choose another breakpoint name, or pass in `$overwrite: true` to overwrite the previous breakpoint.\";\n      @return $breakpoints;\n    }\n    @else if not map-has-key($breakpoints, $name) or $overwrite == true {\n      @return map-merge($breakpoints, $output);\n    }\n  }\n}\n\n@mixin add-breakpoint($name, $bkpt, $overwrite: false) {\n  $output: ($name: $bkpt);\n\n  @if length($BREAKPOINTS) == 0 {\n    $BREAKPOINTS: $output !global;\n  }\n  @else {\n    @if map-has-key($BREAKPOINTS, $name) and $overwrite != true {\n      @warn \"You already have a breakpoint named `#{$name}`, please choose another breakpoint name, or pass in `$overwrite: true` to overwrite the previous breakpoint.\";\n      $BREAKPOINTS: $BREAKPOINTS !global;\n    }\n    @else if not map-has-key($BREAKPOINTS, $name) or $overwrite == true {\n      $BREAKPOINTS: map-merge($BREAKPOINTS, $output) !global;\n    }\n  }\n}\n\n@function get-breakpoint($name: false) {\n  @if $name == false {\n    @return $BREAKPOINTS;\n  }\n  @else {\n    @return map-get($BREAKPOINTS, $name);\n  }\n}\n","@mixin legacy-settings-warning {\n  $legacyVars: (\n    'default-media': 'default media',\n    'default-feature': 'default feature',\n    'force-media-all': 'force all media type',\n    'to-ems': 'to ems',\n    'resolutions': 'transform resolutions',\n    'no-queries': 'no queries',\n    'no-query-fallbacks': 'no query fallbacks',\n    'base-font-size': 'base font size',\n    'legacy-syntax': 'legacy syntax'\n  );\n\n  @each $legacy, $new in $legacyVars {\n    @if global-variable-exists('breakpoint-' + $legacy) {\n      @warn \"In order to avoid variable namspace collisions, we have updated the way to change settings for Breakpoint. Please change all instances of `$breakpoint-#{$legacy}: {{setting}}` to `@include breakpoint-set('#{$new}', {{setting}})`. Variable settings, as well as this warning will be deprecated in a future release.\"\n    }\n  };\n\n  //////////////////////////////\n  // Hand correct each setting\n  //////////////////////////////\n  @if global-variable-exists('breakpoint-default-media') and $breakpoint-default-media != breakpoint-get('default media') {\n    @include breakpoint-set('default media', $breakpoint-default-media);\n  }\n  @if global-variable-exists('breakpoint-default-feature') and $breakpoint-default-feature != breakpoint-get('default feature') {\n    @include breakpoint-set('default feature', $breakpoint-default-feature);\n  }\n  @if global-variable-exists('breakpoint-force-media-all') and $breakpoint-force-media-all != breakpoint-get('force all media type') {\n    @include breakpoint-set('force all media type', $breakpoint-force-media-all);\n  }\n  @if global-variable-exists('breakpoint-to-ems') and $breakpoint-to-ems != breakpoint-get('to ems') {\n    @include breakpoint-set('to ems', $breakpoint-to-ems);\n  }\n  @if global-variable-exists('breakpoint-resolutions') and $breakpoint-resolutions != breakpoint-get('transform resolutions') {\n    @include breakpoint-set('transform resolutions', $breakpoint-resolutions);\n  }\n  @if global-variable-exists('breakpoint-no-queries') and $breakpoint-no-queries != breakpoint-get('no queries') {\n    @include breakpoint-set('no queries', $breakpoint-no-queries);\n  }\n  @if global-variable-exists('breakpoint-no-query-fallbacks') and $breakpoint-no-query-fallbacks != breakpoint-get('no query fallbacks') {\n    @include breakpoint-set('no query fallbacks', $breakpoint-no-query-fallbacks);\n  }\n  @if global-variable-exists('breakpoint-base-font-size') and $breakpoint-base-font-size != breakpoint-get('base font size') {\n    @include breakpoint-set('base font size', $breakpoint-base-font-size);\n  }\n  @if global-variable-exists('breakpoint-legacy-syntax') and $breakpoint-legacy-syntax != breakpoint-get('legacy syntax') {\n    @include breakpoint-set('legacy syntax', $breakpoint-legacy-syntax);\n  }\n}","/**\n * @file\n * sass/partials/common/_variables.scss\n *\n */\n// Tektronix grid variables based on bootsrap 4 grid.\n$mobile-landscape: 576px; // $screen-sm\n$tablet: 768px; // $screen-md\n$desktop: 992px; //$screen-lg\n$desktop-wide: 1280px; //$screen-xl\n$mobile-tablet-only: 'screen' 'max-width' $desktop - 1;\n$mobile-only: 'screen' 'max-width' $tablet - 1;\n$phone-only:  'screen' 'max-width' $mobile-landscape - 1;\n$mobile-landscape-tablet-only: $mobile-landscape $desktop - 1;\n\n$image-path: '../images/';\n// Typography.\n$base-font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n$heading-font-family: 'Neubau Grotesk Light', sans-serif;\n\n// Font Sizes.\n$base-font-size: (18px, 20px, 20px, 20px);\n$base-font: 16px;\n\n// Line height.\n// http://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights.\n$base-line-height: 1.4;\n$heading-line-height: 1.2;\n\n// Other Sizes.\n$base-border-radius: 20px;\n$base-spacing: $base-line-height * 1em;\n$small-spacing: $base-spacing / 2;\n$large-spacing: $base-spacing * 2;\n$base-z-index: 0;\n$side-margin: 15;\n$max-width: 32rem;\n$gutter: 1/3;\n\n$headerHeight: 65px;\n$headerStickyPhone: 104px;\n$inputHeight: 35px;\n\n$toolbarTabHeight: 39px;\n$toolbarMenuHeight: 47px;\n$headerIconSize: 24px;\n\n// Colors.\n$white: #ffffff;\n$blue: #1565c0;\n$dark-gray: #333;\n$medium-gray: #999;\n$light-gray: #ddd;\n$gray-f2: #f2f2f2;\n$gray-f0: #f0f0f0;\n\n// Primary Colors.\n$vibrant-blue: #1CB5D8;\n$charcoal: #3E434A;\n\n// Secondary Colors.\n$tk-blue: #006281;\n$navy: #182752;\n$deep-charcoal: #1B2935;\n$deeper-charcoal: #14232f;\n$gray: #D7D7D7;\n$gray-f5: #F5F5F5;\n$gray-c: #cccccc;\n$white: #FFF;\n\n// Accent Colors.\n$mid-green: #73BF44;\n$vibrant-green: #A5CE39;\n$orange: #F05A22;\n\n// Other Colors.\n$grey-blue: #5E6A71;\n$grey-border: #5E6975;\n$grey-light-border: #8899A8;\n\n$secondary-blue2: #5482AB;\n$secondary-blue3: #5482AB;\n$dark-blue: #005D86;\n$dark-blue2: #5482AB;\n$dark-blue3: #00B5E5;\n$blue-hover: #4399BC;\n$light-blue: #a6cfd8;\n$dark-blue-text: #1a2934;\n\n$black: #000;\n$red1: #D70000;\n$light-red: #f2dede;\n$share-this: #FF6E41;\n$lightest-grey: #ABABAB;\n$light-grey: #666666;\n$light-grey-e: #EEEEEE;\n$grey-e3: #e3e3e3;\n$grey-e4: #e4e4e4;\n$grey-16: #161616;\n$grey-3: #333;\n$grey-5: #555;\n$grey-7: #777;\n$grey-f9: #F9F9F9;\n$grey-btn: #8798A7;\n$darker-grey: #353b43;\n$medium-grey: #40454C;\n$medium-grey-7f: #7F7F7F;\n$table-grey: #758491;\n$grey-e5: #e5e5e5;\n$grey-bg: #e6eaea;\n$tab-select: #F3F4F5;\n$modal-content : #454a4c;\n$dark-blue: #182752;\n$light-blue: #edf6fb;\n$bright-green: #38CA69;\n$light-green: #81ca81;\n$light-tk-blue: #50C1BD;\n\n$tw: #50b4cf;\n$fb: #3d5998;\n$in: #137ab6;\n// Font Colors.\n$base-font-color: $grey-3;\n$action-color: $vibrant-blue;\n$link-hover: #23527c;\n\n// Border.\n$base-border-color: $light-gray;\n$base-border: 1px solid $base-border-color;\n\n// Background Colors.\n$base-background-color: $white;\n$secondary-background-color: tint($base-border-color, 75%);\n\n// Forms.\n$form-box-shadow: inset 0 1px 3px rgba(#000, 0.06);\n$form-box-shadow-focus: $form-box-shadow, 0 0 5px adjust-color($action-color, $lightness: -5%, $alpha: -0.3);\n\n// Animations.\n$base-duration: 150ms;\n$base-timing: ease;\n","/**\n * @file\n * sass/partials/common/_placeholders.scss\n */\n\n%side-paddings-md {\n  @include breakpoint($tablet) {\n    padding-left: $grid-gutter-width/2;\n    padding-right: $grid-gutter-width/2;\n  }\n}\n\n%outer-container {\n  max-width: $max-width;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n%clearfix {\n  &:after {\n    content: '';\n    display: table;\n    clear: both;\n  }\n}\n\n%row-sm {\n  @include breakpoint($mobile-only) {\n    margin-left: rem(-$grid-gutter-width/2);\n    margin-right: rem(-$grid-gutter-width/2);\n  }\n}\n\n%horizontal-nav {\n  ul {\n    margin-top: 0;\n    width: 100%;\n    text-align: center;\n  }\n  li {\n    display: inline-block;\n    padding-left: $small-spacing;\n  }\n  a {\n    color: $medium-gray;\n    text-decoration: none;\n    &:active,\n    &:focus,\n    &:hover {\n      color: $dark-gray;\n    }\n  }\n  .is-active {\n    color: $dark-gray;\n  }\n}\n\n%breadcrumb {\n  @extend %reset-list;\n  color: $lightest-grey;\n  font-size: rem(12px);\n  line-height: rem(18px);\n\n  li {\n    display: inline-block;\n\n    &:before {\n      content: '\\002F';\n      display: inline-block;\n      color: $lightest-grey;\n      padding: 0 rem(5px);\n    }\n\n    &:first-child {\n      &:before {\n        content: none;\n      }\n    }\n  }\n\n  a {\n    &,\n    &:hover {\n      color: $lightest-grey;\n    }\n  }\n}\n\n%center-block {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n%align-icon {\n  display: inline-block;\n  margin-left: rem(5px);\n  vertical-align: middle;\n}\n\n%center-absolute {\n  @include transform(translate(-50%, -50%));\n  left: 50%;\n  top: 50%;\n  position: absolute;\n}\n\n//reset list styles\n%reset-list {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n\n%list--blue-points {\n  list-style-type: none;\n\n  li {\n    position: relative;\n    padding-left: rem(14px);\n    margin-bottom: rem(10px);\n\n    &:before {\n      font-size: rem(13px);\n      content: \"\\2022\";\n      display: block;\n      position: absolute;\n      left: 0;\n      color: $vibrant-blue;\n    }\n  }\n}\n\n%small-font {\n  font-size: rem(14px);\n  line-height: rem(22px);\n}\n\n%color-grey {\n  color: $light-grey !important;\n}\n\n%color-red {\n  color: $red1 !important;\n}\n\n%color-orange {\n  color: $orange !important;\n}\n\n%color--blue {\n  color: $vibrant-blue !important;\n}\n\n%margin-bottom {\n  margin-bottom: rem(20px);\n\n  @include breakpoint($tablet) {\n    margin-bottom: rem(40px);\n  }\n}\n\n%padding-top {\n  padding-top: rem(20px);\n\n  @include breakpoint($tablet) {\n    padding-top: rem(40px);\n  }\n}\n\n%padding-v {\n  padding-top: rem(20px);\n  padding-bottom: rem(20px);\n\n  @include breakpoint($tablet) {\n    padding-top: rem(40px);\n    padding-bottom: rem(40px);\n  }\n}\n\n%thumb-link-icon {\n  display: block;\n  border-bottom: rem(1px) solid $grey-light-border;\n  position: relative;\n  padding: rem(15px) 0 rem(15px) rem(50px);\n\n  &:before {\n    color: $grey-light-border;\n    position: absolute;\n    left: rem(10px);\n    top: 50%;\n    margin-top: rem(-15px);\n    font-size: rem(30px);\n  }\n\n  &:hover {\n    background-color: $blue-hover;\n\n    &:before {\n      color: $white;\n    }\n  }\n\n  @include breakpoint($tablet) {\n    border: rem(1px) solid $blue-hover;\n    padding:  rem(20px) rem(10px);\n    text-align: center;\n\n    &:before {\n      color: $white;\n      display: block;\n      font-size: rem(50px);\n      margin: 0 0 rem(20px);\n      position: static;\n    }\n  }\n}\n\n// Links with icons.\n%top-icon {\n  display: inline-block;\n  position: relative;\n\n  &:active,\n  &:focus,\n  &:hover {\n    text-decoration: none;\n  }\n\n  &:before {\n    display: block;\n    font-size: rem(50px);\n    text-align: center;\n    margin-bottom: rem(15px);\n  }\n\n  .dropdown--icon & {\n    padding-right: rem(14px);// Space for triangle.\n\n    &:after {\n      @include triangle(10px, $vibrant-blue, down);\n      content: '';\n      display: block;\n      position: absolute;\n      bottom: rem(8px);\n      right: 0;\n    }\n\n    &:hover:after {\n      border-top-color: $link-hover;\n    }\n  }\n\n  .opened &:after {\n    border-bottom: 5px solid $link-hover;\n    border-top: 0;\n  }\n}\n\n%left-icon {\n  display: inline-block;\n  padding-left: rem(27px);\n  position: relative;\n\n  &:before {\n    @extend %icons;\n    font-size: rem(21px);\n    left: 0;\n    position: absolute;\n    top: 0;\n  }\n}\n\n%video-icon {\n  display: block;\n  position: relative;\n\n  &:before {\n    @include triangle(16px, $black, right);\n    z-index: 2;\n  }\n\n  &:after {\n    box-shadow: inset 0px 1px 15px 4px rgba(0,0,0,0.75);\n    background-color: rgba(255,255,255,0.75);\n    border-radius: 100%;\n    height: rem(40px);\n    width: rem(40px);\n  }\n\n  &:before,\n  &:after {\n    @extend %center-absolute;\n    display: block;\n    content: '';\n  }\n}\n\n// Display one/two/three items per row for phone/mobile_and_tablet/desktop breakpoints.\n%responsive-align-cards {\n  @include display(flex);\n  @include flex-wrap(wrap);\n}\n\n%separator--right {\n  &:after {\n    content: '\\007C';\n    color: $base-border-color;\n    display: inline-block;\n    margin: 0 rem(10px);\n  }\n\n  &:last-child {\n    &:after {\n      content: none;\n    }\n  }\n}\n\n%border-right-md {\n  @include breakpoint($tablet) {\n    border-right: $base-border !important;\n  }\n}\n\n// Table styles.\n%bordered {\n  td,\n  th {\n    border: rem(1px) solid $light-gray;\n    padding: rem(8px);\n  }\n\n  th {\n    border-bottom-width: rem(2px);\n  }\n}\n\n// Responsive video.\n%responsive-video {\n  position: relative;\n\n  &:after {\n    content: '';\n    display: block;\n    padding-bottom: 56.25%;\n  }\n\n  iframe,\n  object,\n  .video-js {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n  }\n}\n\n%scale-img {\n  img {\n    @include transition(transform 0.5s);\n    @include transform(scale(1));\n  }\n\n  &:hover {\n    img {\n      @include transform(scale(1.05));\n    }\n  }\n}\n\n%title {\n  font-size: rem(30px);\n\n  @include breakpoint($tablet) {\n    font-size: rem(36px);\n  }\n}\n\n// Pseudo element that comes out of container.\n%out-of-container {\n  position: relative;\n\n  &:before {\n    @include transform(translateX(-50%));\n    content: '';\n    left: 50%;\n    position: absolute;\n    width: 100vw;\n    top: 0;\n    height: 100%;\n    z-index: -1;\n  }\n}\n","// ICONS\n\n%icons {\n  /* use !important to prevent issues with browser extensions that change fonts */\n  font-family: 'tek' !important;\n  speak: none;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n\n  /* Better Font Rendering =========== */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n[class^=\"icon-\"], [class*=\" icon-\"] {\n  &:before {\n    @extend %icons;\n  }\n}\n\n.icon-spectroscopy:before {\n  content: \"\\e930\";\n}\n\n.icon-quantum:before {\n  content: \"\\e931\";\n}\n\n.icon-photonic-doppler:before {\n  content: \"\\e932\";\n}\n\n.icon-research:before {\n  content: \"\\e933\";\n}\n\n.icon-power-efficiency:before {\n  content: \"\\e924\";\n}\n\n.icon-max-battery-life:before {\n  content: \"\\e925\";\n}\n\n.icon-live-ip-media:before {\n  content: \"\\e926\";\n}\n\n.icon-cloud-video-delivery:before {\n  content: \"\\e927\";\n}\n\n.icon-4k-hdr-video-test:before {\n  content: \"\\e928\";\n}\n\n.icon-3d-sensing:before {\n  content: \"\\e929\";\n}\n\n.icon-auto-parametric:before {\n  content: \"\\e92a\";\n}\n\n.icon-can-bus:before {\n  content: \"\\e92b\";\n}\n\n.icon-auto-ethernet:before {\n  content: \"\\e92c\";\n}\n\n.icon-automobile:before {\n  content: \"\\e92d\";\n}\n\n.icon-consumer:before {\n  content: \"\\e92e\";\n}\n\n.icon-satcom:before {\n  content: \"\\e92f\";\n}\n\n.icon-read:before {\n  content: \"\\e923\";\n}\n\n.icon-manual:before {\n  content: \"\\e921\";\n}\n\n.icon-datasheet:before {\n  content: \"\\e922\";\n}\n\n.icon-play-filled:before {\n  content: \"\\e91a\";\n}\n\n.icon-cart-bold:before {\n  content: \"\\e91b\";\n}\n\n.icon-comment-bold:before {\n  content: \"\\e91c\";\n}\n\n.icon-mail-bold:before {\n  content: \"\\e91d\";\n}\n\n.icon-glasses:before {\n  content: \"\\e91e\";\n}\n\n.icon-phone-bold:before {\n  content: \"\\e91f\";\n}\n\n.icon-play-new:before {\n  content: \"\\e920\";\n}\n\n.icon-wechat:before {\n  content: \"\\e917\";\n}\n\n.icon-weibo:before {\n  content: \"\\ea9a\";\n}\n\n.icon-plus:before {\n  content: \"\\e916\";\n}\n\n.icon-minus:before {\n  content: \"\\e918\";\n}\n\n.icon-quit:before {\n  content: \"\\e919\";\n}\n\n.icon-aero_def_govt:before {\n  content: \"\\e900\";\n}\n\n.icon-analog_digital_design_debug:before {\n  content: \"\\e901\";\n}\n\n.icon-auto_trans:before {\n  content: \"\\e902\";\n}\n\n.icon-broadcast_media:before {\n  content: \"\\e903\";\n}\n\n.icon-comm_ntwk_sys:before {\n  content: \"\\e904\";\n}\n\n.icon-computers_peripherals:before {\n  content: \"\\e905\";\n}\n\n.icon-consumer_electronics_appliances:before {\n  content: \"\\e906\";\n}\n\n.icon-data-communication:before {\n  content: \"\\e907\";\n}\n\n.icon-education_research:before {\n  content: \"\\e908\";\n}\n\n.icon-emi:before {\n  content: \"\\e909\";\n}\n\n.icon-high_speed_serial_comm:before {\n  content: \"\\e90a\";\n}\n\n.icon-industrial_auto_mtr_ctrl:before {\n  content: \"\\e90b\";\n}\n\n.icon-materials-science:before {\n  content: \"\\e90c\";\n}\n\n.icon-media_prod_and_delivery:before {\n  content: \"\\e90d\";\n}\n\n.icon-medical:before {\n  content: \"\\e90e\";\n}\n\n.icon-ntwk_operators:before {\n  content: \"\\e90f\";\n}\n\n.icon-opt_communications:before {\n  content: \"\\e910\";\n}\n\n.icon-power_energy_efficiency:before {\n  content: \"\\e911\";\n}\n\n.icon-radar_electronic_warfare:before {\n  content: \"\\e912\";\n}\n\n.icon-semiconductor_design_mfg:before {\n  content: \"\\e913\";\n}\n\n.icon-spectrum_mgmt_inter_hunting:before {\n  content: \"\\e914\";\n}\n\n.icon-wireless_rf:before {\n  content: \"\\e915\";\n}\n\n.icon-bubble:before {\n  content: \"\\61\";\n}\n\n.icon-search:before {\n  content: \"\\63\";\n}\n\n.icon-downloads:before {\n  content: \"\\64\";\n}\n\n.icon-chevron-down:before {\n  content: \"\\7c\";\n}\n\n.icon-chevron-right:before {\n  content: \"\\65\";\n}\n\n.icon-chevron-up:before {\n  content: \"\\7d\";\n}\n\n.icon-chevron-left:before {\n  content: \"\\66\";\n}\n\n.icon-video:before {\n  content: \"\\67\";\n}\n\n.icon-faq:before {\n  content: \"\\69\";\n}\n\n.icon-gplus:before {\n  content: \"\\6a\";\n}\n\n.icon-twitter:before {\n  content: \"\\6b\";\n}\n\n.icon-youtube:before {\n  content: \"\\6c\";\n}\n\n.icon-place:before {\n  content: \"\\6d\";\n}\n\n.icon-contact-12:before {\n  content: \"\\6e\";\n}\n\n.icon-mail:before {\n  content: \"\\6f\";\n}\n\n.icon-manuals:before {\n  content: \"\\70\";\n}\n\n.icon-product-demo:before {\n  content: \"\\71\";\n}\n\n.icon-google-plus:before {\n  content: \"\\72\";\n}\n\n.icon-in:before {\n  content: \"\\73\";\n}\n\n.icon-tw:before {\n  content: \"\\74\";\n}\n\n.icon-fb:before {\n  content: \"\\76\";\n}\n\n.icon-linkedin:before {\n  content: \"\\77\";\n}\n\n.icon-download:before {\n  content: \"\\78\";\n}\n\n.icon-award:before {\n  content: \"\\79\";\n}\n\n.icon-tech:before {\n  content: \"\\7a\";\n}\n\n.icon-share:before {\n  content: \"\\41\";\n}\n\n.icon-comments:before {\n  content: \"\\42\";\n}\n\n.icon-close:before {\n  content: \"\\43\";\n}\n\n.icon-tick-circle:before {\n  content: \"\\44\";\n}\n\n.icon-support-circle:before {\n  content: \"\\45\";\n}\n\n.icon-star-circle:before {\n  content: \"\\46\";\n}\n\n.icon-download-circle:before {\n  content: \"\\47\";\n}\n\n.icon-new-window:before {\n  content: \"\\48\";\n}\n\n.icon-chat:before {\n  content: \"\\49\";\n}\n\n.icon-reset:before {\n  content: \"\\4a\";\n}\n\n.icon-phone:before {\n  content: \"\\4b\";\n}\n\n.icon-partners:before {\n  content: \"\\4c\";\n}\n\n.icon-menu:before {\n  content: \"\\62\";\n}\n\n.icon-tick:before {\n  content: \"\\4d\";\n}\n\n.icon-warranty:before {\n  content: \"\\4e\";\n}\n\n.icon-sale:before {\n  content: \"\\4f\";\n}\n\n.icon-contact-us:before {\n  content: \"\\50\";\n}\n\n.icon-industries:before {\n  content: \"\\57\";\n}\n\n.icon-quantity:before {\n  content: \"\\58\";\n}\n\n.icon-photo:before {\n  content: \"\\54\";\n}\n\n.icon-facebook:before {\n  content: \"\\68\";\n}\n\n.icon-applications:before {\n  content: \"\\52\";\n}\n\n.icon-communication:before {\n  content: \"\\51\";\n}\n\n.icon-medical:before {\n  content: \"\\53\";\n}\n\n.icon-industrial-automation:before {\n  content: \"\\55\";\n}\n\n.icon-consumer-electronics:before {\n  content: \"\\56\";\n}\n\n.icon-computers:before {\n  content: \"\\59\";\n}\n\n.icon-automotive:before {\n  content: \"\\5a\";\n}\n\n.icon-aerospace:before {\n  content: \"\\30\";\n}\n\n.icon-education:before {\n  content: \"\\31\";\n}\n\n.icon-broadcast-media:before {\n  content: \"\\34\";\n}\n\n.icon-photos:before {\n  content: \"\\35\";\n}\n\n.icon-network-operators:before {\n  content: \"\\36\";\n}\n\n.icon-cart-tick:before {\n  content: \"\\37\";\n}\n\n.icon-configure:before {\n  content: \"\\38\";\n}\n\n.icon-add-to-cart:before {\n  content: \"\\39\";\n}\n\n.icon-info:before {\n  content: \"\\21\";\n}\n\n.icon-datasheets:before {\n  content: \"\\22\";\n}\n\n.icon-book:before {\n  content: \"\\23\";\n}\n\n.icon-gift:before {\n  content: \"\\24\";\n}\n\n.icon-profile:before {\n  content: \"\\25\";\n}\n\n.icon-trash:before {\n  content: \"\\26\";\n}\n\n.icon-cart:before {\n  content: \"\\27\";\n}\n\n.icon-on-demand:before {\n  content: \"\\28\";\n}\n\n.icon-pdf:before {\n  content: \"\\29\";\n}\n\n.icon-word:before {\n  content: \"\\2a\";\n}\n\n.icon-excel:before {\n  content: \"\\2b\";\n}\n\n.icon-powerpoint:before {\n  content: \"\\2c\";\n}\n\n.icon-lock:before {\n  content: \"\\2d\";\n}\n\n.icon-badge:before {\n  content: \"\\2e\";\n}\n\n.icon-folder:before {\n  content: \"\\2f\";\n}\n\n.icon-scroll:before {\n  content: \"\\3a\";\n}\n\n.icon-tv:before {\n  content: \"\\3b\";\n}\n\n.icon-question:before {\n  content: \"\\3c\";\n}\n\n.icon-cross-circle:before {\n  content: \"\\3d\";\n}\n\n.icon-checked-circle:before {\n  content: \"\\3e\";\n}\n\n.icon-platinum-care:before {\n  content: \"\\3f\";\n}\n\n.icon-silver-care:before {\n  content: \"\\40\";\n}\n\n.icon-gold-care:before {\n  content: \"\\5b\";\n}\n\n.icon-gold-lite:before {\n  content: \"\\5d\";\n}\n\n.icon-inverse:before {\n  content: \"\\5e\";\n}\n\n.icon-cog:before {\n  content: \"\\5f\";\n}\n\n.icon-earth:before {\n  content: \"\\60\";\n}\n\n.icon-dollar:before {\n  content: \"\\7b\";\n}\n\n.icon-quotation:before {\n  content: \"\\75\";\n}\n\n.icon-euro:before {\n  content: \"\\e934\";\n}\n\n.icon-pound:before {\n  content: \"\\e935\";\n}\n\n","// Custom mixins.\n// =============================================================================\n// Font Face\n// =============================================================================\n@mixin grotesk-light {\n  font-family: 'Neubau Grotesk Light', $helvetica;\n}\n\n@mixin grotesk-regular {\n  font-family: 'Neubau Grotesk Regular', $helvetica;\n}\n\n@mixin grotesk-bold {\n  font-family: 'Neubau Grotesk Bold', $helvetica;\n}\n\n@mixin gothic {\n  font-family: 'Avant Garde Gothic', $helvetica;\n}\n\n@mixin gothic-light {\n  font-family: 'Avant Garde Gothic Light', $helvetica;\n}\n\n\n@mixin helvetica-arial-regular {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: normal;\n  font-weight: 400;\n}\n\n@mixin helvetica-arial-light {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: normal;\n  font-weight: 300;\n}\n\n@mixin helvetica-arial-light-italic {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: italic;\n  font-weight: 300;\n}\n\n@mixin helvetica-arial-book {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: normal;\n  font-weight: 500;\n}\n\n@mixin helvetica-arial-semibold {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: normal;\n  font-weight: 600;\n}\n\n@mixin helvetica-arial-bold {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: normal;\n  font-weight: 700;\n}\n\n@mixin fixed-positioned {\n  position: fixed;\n  width: 100%;\n  left: 0;\n}\n\n@mixin mobile-menu-style {\n  display: block;\n  color: $white;\n  font-size: rem(13px);\n  letter-spacing: rem(0.6px);\n  line-height: 1;\n  position: relative;\n  padding: rem(20px) rem($grid-gutter-width/2);\n  text-transform: uppercase;\n  text-decoration: none;\n\n  &:before {\n    @extend %icons;\n    @extend .icon-chevron-down;\n    font-size: rem(14px);\n    position: absolute;\n    right: rem($grid-gutter-width/2);\n    top: 50%;\n    margin-top: rem(-7px);\n  }\n\n  &:hover {\n    text-decoration: none;\n  }\n}\n\n@mixin sr-only {\n  position: absolute;\n  width: rem(1px);\n  height: rem(1px);\n  margin: rem(-1px);\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n\n@mixin underlined-header($bg-col: $grey-3 ) {\n  &:after {\n    content: '';\n    display: block;\n    width: rem(40px);\n    height: rem(1px);\n    background-color: $bg-col;\n    margin-top: rem(15px);\n  }\n}\n\n// Define placeholders that contain mixins.\n%date {\n  @include helvetica-arial-light;\n  color: $lightest-grey;\n}\n\n%section-title {\n  @include helvetica-arial-book;\n  color: $medium-gray;\n  font-size: rem(14px);\n  text-transform: uppercase;\n}\n\n%featured-title {\n  @include helvetica-arial-light;\n  color: $base-font-color;\n  display: block;\n  font-size: rem(22px);\n}\n\n%dropdown-btn {\n  position: relative;\n  z-index: 20;\n\n  ul {\n    @extend %reset-list;\n    @include transition(opacity 0.3s ease-out);\n    background-color: $white;\n    display: block;\n    width: 90%;\n    max-height: 0;\n    overflow: hidden;\n    opacity: 0;\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    margin-left: -45%; // Half dropdown's width.\n\n    a {\n      @include helvetica-arial-light;\n      color: $base-font-color;\n      display: block;\n      font-size: rem(12px);\n      padding: rem(5px) rem(20px);\n\n      &:hover {\n        background-color: $tk-blue;\n        color: $white;\n        text-decoration: none;\n      }\n    }\n  }\n\n  &.opened {\n    ul {\n      border: rem(1px) solid rgba(0,0,0,0.15);\n      box-shadow:  0 rem(3px) rem(6px) rgba(0,0,0,0.2);\n      max-height: rem(700px);\n      overflow-y: auto;\n      opacity: 1;\n    }\n\n    .icon-chevron-down {\n      &:before {\n        content: '\\7d';\n      }\n    }\n  }\n\n  .btn--green {\n    @include helvetica-arial-book;\n    letter-spacing: rem(0.6px);\n    padding: rem(8px) rem(40px) rem(8px) rem(15px);\n\n    &,\n    &:hover {\n      background-color: $mid-green;\n    }\n\n    &:before {\n      font-size: rem(15px);\n    }\n  }\n\n  &.dropdown--icon {\n    ul {\n      width: rem(100px);\n      margin-left: rem(-50px); // Half width.\n    }\n  }\n}\n\n@mixin colored-border {\n  position: relative;\n\n  &:before {\n    @include linear-gradient(left, $vibrant-blue, $mid-green);\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: rem(2px);\n    bottom: 0;\n    left: 0;\n  }\n}\n@mixin steps-arrowed-nav ($arrow_left_color) {\n  position: absolute;\n  top: 0;\n  display: block;\n  border-left: rem(25px) solid $arrow-left-color; \n  border-top: rem(17px) solid transparent; \n  border-bottom: rem(17px) solid transparent;\n  width:0;\n  height:0;\n  content: \" \";\n}\n","\n// Horizontal gradient, from left to right\n//\n// Creates two color stops, start and end, by specifying a color and position for each color stop.\n// Color stops are not available in IE9 and below.\n@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {\n  background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Safari 5.1-6, Chrome 10+\n  background-image: -o-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Opera 12\n  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down\n}\n\n// Vertical gradient, from top to bottom\n//\n// Creates two color stops, start and end, by specifying a color and position for each color stop.\n// Color stops are not available in IE9 and below.\n@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {\n  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+\n  background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12\n  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down\n}\n\n@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {\n  background-repeat: repeat-x;\n  background-image: -webkit-linear-gradient($deg, $start-color, $end-color); // Safari 5.1-6, Chrome 10+\n  background-image: -o-linear-gradient($deg, $start-color, $end-color); // Opera 12\n  background-image: linear-gradient($deg, $start-color, $end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n}\n@mixin gradient-horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {\n  background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);\n  background-image: -o-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);\n  background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);\n  background-repeat: no-repeat;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down, gets no color-stop at all for proper fallback\n}\n@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {\n  background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);\n  background-image: -o-linear-gradient($start-color, $mid-color $color-stop, $end-color);\n  background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);\n  background-repeat: no-repeat;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback\n}\n@mixin gradient-radial($circle: circle, $inner-color: #555, $outer-color: #333) {\n  background-image: -webkit-radial-gradient($circle, $inner-color, $outer-color);\n  background-image: radial-gradient($circle, $inner-color, $outer-color);\n  background-repeat: no-repeat;\n}\n@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {\n  background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);\n  background-image: -o-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);\n  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);\n}"],"mappings":"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","names":[],"sourceRoot":"/source/"}